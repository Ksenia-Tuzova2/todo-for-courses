[{"/Users/kseniatuzova/Documents/GitHub/todo-for-courses/src/index.tsx":"1","/Users/kseniatuzova/Documents/GitHub/todo-for-courses/src/serviceWorker.ts":"2","/Users/kseniatuzova/Documents/GitHub/todo-for-courses/src/App.tsx":"3","/Users/kseniatuzova/Documents/GitHub/todo-for-courses/src/components/toDoList/ToDoList.tsx":"4","/Users/kseniatuzova/Documents/GitHub/todo-for-courses/src/components/taskItem/taskItem.tsx":"5","/Users/kseniatuzova/Documents/GitHub/todo-for-courses/src/store/redux-store.ts":"6","/Users/kseniatuzova/Documents/GitHub/todo-for-courses/src/store/tasksReduser.ts":"7","/Users/kseniatuzova/Documents/GitHub/todo-for-courses/src/store/toDoListReduser.ts":"8","/Users/kseniatuzova/Documents/GitHub/todo-for-courses/src/api/tasksApi.ts":"9","/Users/kseniatuzova/Documents/GitHub/todo-for-courses/src/api/instance.ts":"10","/Users/kseniatuzova/Documents/GitHub/todo-for-courses/src/api/authApi.ts":"11","/Users/kseniatuzova/Documents/GitHub/todo-for-courses/src/components/AddItemForm.tsx":"12","/Users/kseniatuzova/Documents/GitHub/todo-for-courses/src/components/toDoList/ToDoListMap.tsx":"13","/Users/kseniatuzova/Documents/GitHub/todo-for-courses/src/api/todoApi.ts":"14","/Users/kseniatuzova/Documents/GitHub/todo-for-courses/src/store/authReduser.ts":"15","/Users/kseniatuzova/Documents/GitHub/todo-for-courses/src/components/toDoList/filter.tsx":"16"},{"size":647,"mtime":1679050292958,"results":"17","hashOfConfig":"18"},{"size":5295,"mtime":1678366078912,"results":"19","hashOfConfig":"18"},{"size":2000,"mtime":1679570120860,"results":"20","hashOfConfig":"18"},{"size":2707,"mtime":1679568196600,"results":"21","hashOfConfig":"18"},{"size":5880,"mtime":1679308241945,"results":"22","hashOfConfig":"18"},{"size":937,"mtime":1678624398367,"results":"23","hashOfConfig":"18"},{"size":6222,"mtime":1679402617169,"results":"24","hashOfConfig":"18"},{"size":3947,"mtime":1679567856992,"results":"25","hashOfConfig":"18"},{"size":2873,"mtime":1679567461171,"results":"26","hashOfConfig":"18"},{"size":1044,"mtime":1679568905714,"results":"27","hashOfConfig":"18"},{"size":440,"mtime":1678627577929,"results":"28","hashOfConfig":"18"},{"size":1727,"mtime":1679313635109,"results":"29","hashOfConfig":"18"},{"size":1297,"mtime":1678624294859,"results":"30","hashOfConfig":"18"},{"size":1814,"mtime":1679571758628,"results":"31","hashOfConfig":"18"},{"size":2887,"mtime":1679402772241,"results":"32","hashOfConfig":"18"},{"size":1696,"mtime":1679306697494,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},"1nsgywz",{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"41","messages":"42","suppressedMessages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"47","messages":"48","suppressedMessages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"37"},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"57","messages":"58","suppressedMessages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","suppressedMessages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"63","messages":"64","suppressedMessages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","suppressedMessages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"69","messages":"70","suppressedMessages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"72","messages":"73","suppressedMessages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"75","messages":"76","suppressedMessages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"78","messages":"79","suppressedMessages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"81","messages":"82","suppressedMessages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"37"},"/Users/kseniatuzova/Documents/GitHub/todo-for-courses/src/index.tsx",[],[],[],"/Users/kseniatuzova/Documents/GitHub/todo-for-courses/src/serviceWorker.ts",[],[],"/Users/kseniatuzova/Documents/GitHub/todo-for-courses/src/App.tsx",["85"],[],"/Users/kseniatuzova/Documents/GitHub/todo-for-courses/src/components/toDoList/ToDoList.tsx",["86","87"],[],"/Users/kseniatuzova/Documents/GitHub/todo-for-courses/src/components/taskItem/taskItem.tsx",["88","89","90","91","92","93","94"],[],"import { Delete } from '@mui/icons-material';\nimport CreateIcon from '@mui/icons-material/Create';\nimport IconButton from '@mui/material/IconButton';\nimport { Checkbox } from '@mui/material';\nimport { ChangeEvent, useCallback, useState } from 'react';\nimport { changeChecBoxAC, changeTaskTitleRequest, PriorityTaskType, StatusTaskType, TasksType } from '../../store/tasksReduser';\nimport { UseAppDispatch } from '../../store/redux-store';\nimport React from 'react';\n\n\nexport type PropsTaskType = {\n    // onChangeCheckBoxHandler: (e: ChangeEvent<HTMLInputElement>) => void,\n    onDeleteHandler: (idItem: string) => void,\n}\n\n\nexport const TaskItem = React.memo(({\n    //можно все данные распаковать в юзселекторе\n    todoListId,\n    completed,\n    title,\n    onDeleteHandler,\n    id\n}: PropsTaskType & TasksType) => {\n\n    const[disabledButtonState,setDisabledButtonState ]=useState(false)\n\n\n    const dispatch = UseAppDispatch()\n    const [editMode, setEditMode] = useState<boolean>(false)\n\n    let [taskInputValue, setTaskInputValue] = useState<string>('')\n\n    let [descriptionInputValue, setDescriptionInputValue] = useState<string>('')\n\n    let [startDateInputValue, setStartDateInputValue] = useState<string>('')\n\n\n    let [deadlineInputValue, setDeadlineInputValue] = useState<string>('')\n\n\n    let [statusInputValue, setStatusInputValue] = useState<StatusTaskType>(0)\n\n    let [priorityInputValue, setPriorityInputValue] = useState<PriorityTaskType>(0)\n\n    let [orderInputValue, setOrderInputValue] = useState<number>(0)\n\n    let [completedInputValue, setCompletedInputValue] = useState<boolean>(false)\n\n\n\n    let upateInputValueChangeHandler = (newtext: string) => {\n        setTaskInputValue(newtext)\n    }\n\n    let updatePriorityInputValueChangeHandler = (newValue: number) => {\n\n\n    }\n\n\n    const changeEditModeHandler: any = useCallback((e: React.MouseEvent<HTMLSpanElement, MouseEvent>) => {\n        setEditMode(true)\n    }, [])\n\n    const onBlurCallback = useCallback((e: React.FocusEvent<HTMLInputElement>) => {\n        // выключить editMode при нажатии за пределами инпута\n        setEditMode(false)\n\n        //здесь что-то не то\n        dispatch(changeTaskTitleRequest( todoListId,id, e.currentTarget.value))\n\n    }, [dispatch])\n\n    const changeCheckBoxHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        dispatch(changeChecBoxAC(e.currentTarget.checked, todoListId, id,))\n    }\n\n\n\n    return (\n        <li className={completed ? 'completed' : ''}>\n\n            {editMode ? (\n                <>\n                    <input\n                        name='order'\n                        // не понимаю почему намбер не работает\n                        type={'number'}\n                        placeholder='Add priority'\n                        step='1'\n                        min=\"0\" max=\"10\"\n                        onChange={(e) => setOrderInputValue(+e.currentTarget.value)}\n                        value={orderInputValue}\n                        onBlur={onBlurCallback}\n                    />\n                    \n                    <input\n                    placeholder='Set title'\n                        onChange={(e) => upateInputValueChangeHandler(e.currentTarget.value)}\n                        value={taskInputValue}\n                        onBlur={onBlurCallback} />\n<br />\n                    <textarea\n                        name='decription'\n                        placeholder='there is no description yet'\n                        onChange={(e) => setDescriptionInputValue(e.currentTarget.value)}\n                        value={descriptionInputValue}\n                    />\n                    <br />\n                    Priority: <input\n                        name='priority'\n                        // не понимаю почему намбер не работает\n                        type={\"number\"}\n                        placeholder='Add priority'\n                        step='1'\n                        min=\"0\" max=\"10\"\n                        onChange={(e) => setPriorityInputValue(+e.currentTarget.value)}\n                        value={priorityInputValue}\n                        onBlur={onBlurCallback}\n                    />\n\n<br />\n                    Start date: <input\n                        name='addDate'\n                        type='date'\n                        onChange={(e) => setStartDateInputValue(e.currentTarget.value)}\n                        value={startDateInputValue}\n                        onBlur={onBlurCallback}\n                    />\n<br />\n                   Deadline: <input\n                        name='deadline'\n                        type='date'\n                        onChange={(e) => setDeadlineInputValue(e.currentTarget.value)}\n                        value={deadlineInputValue}\n                        onBlur={onBlurCallback}\n                    />\n           <br />\n\n                </>\n            ) : (\n                <span onDoubleClick={\n                    (e) => changeEditModeHandler}>\n                    {orderInputValue}.  {title}\n                </span>\n            )}\n\n            <Checkbox\n            disabled={disabledButtonState} \n                checked={completed}\n                onChange={(e) => changeCheckBoxHandler(e)}\n            />\n            <IconButton \n            disabled={disabledButtonState} \n            aria-label=\"delete\"\n                onClick={() => onDeleteHandler(id)}>\n                <Delete />\n            </IconButton>\n\n            <IconButton \n            aria-label=\"create\"\n            disabled={disabledButtonState} \n                onClick={() => changeEditModeHandler()}\n                onBlur={() => onBlurCallback}\n            >\n                <CreateIcon />\n            </IconButton>\n\n        </li>)\n}\n)\n\n","/Users/kseniatuzova/Documents/GitHub/todo-for-courses/src/store/redux-store.ts",[],[],"/Users/kseniatuzova/Documents/GitHub/todo-for-courses/src/store/tasksReduser.ts",[],[],"/Users/kseniatuzova/Documents/GitHub/todo-for-courses/src/store/toDoListReduser.ts",[],[],"/Users/kseniatuzova/Documents/GitHub/todo-for-courses/src/api/tasksApi.ts",["95","96"],[],"/Users/kseniatuzova/Documents/GitHub/todo-for-courses/src/api/instance.ts",[],[],"/Users/kseniatuzova/Documents/GitHub/todo-for-courses/src/api/authApi.ts",[],[],"/Users/kseniatuzova/Documents/GitHub/todo-for-courses/src/components/AddItemForm.tsx",[],[],"/Users/kseniatuzova/Documents/GitHub/todo-for-courses/src/components/toDoList/ToDoListMap.tsx",[],[],"/Users/kseniatuzova/Documents/GitHub/todo-for-courses/src/api/todoApi.ts",["97"],[],"/Users/kseniatuzova/Documents/GitHub/todo-for-courses/src/store/authReduser.ts",[],[],"/Users/kseniatuzova/Documents/GitHub/todo-for-courses/src/components/toDoList/filter.tsx",["98"],[],"import {  useCallback, useState } from 'react';\nimport { Button} from '@mui/material';\nimport {  UseAppDispatch } from '../../store/redux-store';\nimport { changeFilterAc, FilterType } from '../../store/toDoListReduser';\nimport React from 'react';\n\nexport type FilterPropsType = {\n    filter: FilterType,\n    todoId: string\n}\n\n\nexport const Filter=React.memo(({\n    filter,\n    todoId }: FilterPropsType)=> {\n\n    let dispatch = UseAppDispatch()\n    const[disabledButtonState,setDisabledButtonState ]=useState(false)\n\n\n\n\n    \n    const changeFilterHandler = useCallback((param: FilterType)=>{\n\n        setDisabledButtonState(true)\n        dispatch(changeFilterAc(todoId, param))\n        setDisabledButtonState(false)\n \n    },[])\n    \n\n\n\n    return (\n      \n                <div>\n                    <Button  \n                    disabled={disabledButtonState}  \n                    color={'secondary'} \n                    variant={filter === 'All' ? 'outlined' : 'text'} \n                    onClick={() => changeFilterHandler('All')}>\n                        All\n                    </Button>\n\n                    <Button \n                     disabled={disabledButtonState} \n                    variant={filter === 'Active' ? 'outlined' : 'text'} \n                    onClick={() => changeFilterHandler('Active')}>Active\n                    </Button>\n\n                    <Button\n                     disabled={disabledButtonState} \n                    variant={filter === 'Completed' ? 'outlined' : 'text'} \n                    onClick={() => {changeFilterHandler('Completed')}} >\n                        Completed\n                    </Button>\n\n                </div>\n           \n    );\n})\n\n\n",{"ruleId":"99","severity":1,"message":"100","line":31,"column":9,"nodeType":"101","endLine":31,"endColumn":11,"suggestions":"102"},{"ruleId":"99","severity":1,"message":"103","line":41,"column":7,"nodeType":"101","endLine":41,"endColumn":9,"suggestions":"104"},{"ruleId":"99","severity":1,"message":"105","line":47,"column":7,"nodeType":"101","endLine":47,"endColumn":9,"suggestions":"106"},{"ruleId":"107","severity":1,"message":"108","line":26,"column":31,"nodeType":"109","messageId":"110","endLine":26,"endColumn":53},{"ruleId":"107","severity":1,"message":"111","line":42,"column":10,"nodeType":"109","messageId":"110","endLine":42,"endColumn":26},{"ruleId":"107","severity":1,"message":"112","line":42,"column":28,"nodeType":"109","messageId":"110","endLine":42,"endColumn":47},{"ruleId":"107","severity":1,"message":"113","line":48,"column":10,"nodeType":"109","messageId":"110","endLine":48,"endColumn":29},{"ruleId":"107","severity":1,"message":"114","line":48,"column":31,"nodeType":"109","messageId":"110","endLine":48,"endColumn":53},{"ruleId":"107","severity":1,"message":"115","line":56,"column":9,"nodeType":"109","messageId":"110","endLine":56,"endColumn":46},{"ruleId":"99","severity":1,"message":"116","line":73,"column":8,"nodeType":"101","endLine":73,"endColumn":18,"suggestions":"117"},{"ruleId":"107","severity":1,"message":"118","line":1,"column":10,"nodeType":"109","messageId":"110","endLine":1,"endColumn":26},{"ruleId":"107","severity":1,"message":"119","line":1,"column":28,"nodeType":"109","messageId":"110","endLine":1,"endColumn":42},{"ruleId":"107","severity":1,"message":"120","line":1,"column":8,"nodeType":"109","messageId":"110","endLine":1,"endColumn":13},{"ruleId":"99","severity":1,"message":"105","line":30,"column":7,"nodeType":"101","endLine":30,"endColumn":9,"suggestions":"121"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["122"],"React Hook useCallback has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["123"],"React Hook useCallback has missing dependencies: 'dispatch' and 'todoId'. Either include them or remove the dependency array.",["124"],"@typescript-eslint/no-unused-vars","'setDisabledButtonState' is assigned a value but never used.","Identifier","unusedVar","'statusInputValue' is assigned a value but never used.","'setStatusInputValue' is assigned a value but never used.","'completedInputValue' is assigned a value but never used.","'setCompletedInputValue' is assigned a value but never used.","'updatePriorityInputValueChangeHandler' is assigned a value but never used.","React Hook useCallback has missing dependencies: 'id' and 'todoListId'. Either include them or remove the dependency array.",["125"],"'PriorityTaskType' is defined but never used.","'StatusTaskType' is defined but never used.","'axios' is defined but never used.",["126"],{"desc":"127","fix":"128"},{"desc":"127","fix":"129"},{"desc":"130","fix":"131"},{"desc":"132","fix":"133"},{"desc":"130","fix":"134"},"Update the dependencies array to be: [dispatch]",{"range":"135","text":"136"},{"range":"137","text":"136"},"Update the dependencies array to be: [dispatch, todoId]",{"range":"138","text":"139"},"Update the dependencies array to be: [dispatch, id, todoListId]",{"range":"140","text":"141"},{"range":"142","text":"139"},[1014,1016],"[dispatch]",[1325,1327],[1457,1459],"[dispatch, todoId]",[2236,2246],"[dispatch, id, todoListId]",[724,726]]