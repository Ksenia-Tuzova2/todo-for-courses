[{"/Users/kseniatuzova/Documents/GitHub/todo-for-courses/src/index.tsx":"1","/Users/kseniatuzova/Documents/GitHub/todo-for-courses/src/serviceWorker.ts":"2","/Users/kseniatuzova/Documents/GitHub/todo-for-courses/src/App.tsx":"3","/Users/kseniatuzova/Documents/GitHub/todo-for-courses/src/AddItemForm.tsx":"4","/Users/kseniatuzova/Documents/GitHub/todo-for-courses/src/components/toDoList/toDoListContainer.tsx":"5","/Users/kseniatuzova/Documents/GitHub/todo-for-courses/src/components/toDoList/ToDoList.tsx":"6","/Users/kseniatuzova/Documents/GitHub/todo-for-courses/src/components/taskItem/taskItem.tsx":"7","/Users/kseniatuzova/Documents/GitHub/todo-for-courses/src/store/redux-store.ts":"8","/Users/kseniatuzova/Documents/GitHub/todo-for-courses/src/store/tasksReduser.ts":"9","/Users/kseniatuzova/Documents/GitHub/todo-for-courses/src/store/toDoListReduser.ts":"10"},{"size":599,"mtime":1677266631988,"results":"11","hashOfConfig":"12"},{"size":5295,"mtime":1674252406977,"results":"13","hashOfConfig":"12"},{"size":2582,"mtime":1677266809628,"results":"14","hashOfConfig":"12"},{"size":1541,"mtime":1677237920059,"results":"15","hashOfConfig":"12"},{"size":4762,"mtime":1677265737899,"results":"16","hashOfConfig":"12"},{"size":3434,"mtime":1676996697746,"results":"17","hashOfConfig":"12"},{"size":847,"mtime":1677248575642,"results":"18","hashOfConfig":"12"},{"size":1419,"mtime":1677266055477,"results":"19","hashOfConfig":"12"},{"size":4268,"mtime":1677266477694,"results":"20","hashOfConfig":"12"},{"size":2604,"mtime":1677264113429,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1nsgywz",{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"28"},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"28"},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/kseniatuzova/Documents/GitHub/todo-for-courses/src/index.tsx",[],[],"/Users/kseniatuzova/Documents/GitHub/todo-for-courses/src/serviceWorker.ts",[],[],[],"/Users/kseniatuzova/Documents/GitHub/todo-for-courses/src/App.tsx",["55","56","57"],[],"/Users/kseniatuzova/Documents/GitHub/todo-for-courses/src/AddItemForm.tsx",["58","59","60"],[],"import { Button, IconButton, TextField } from '@mui/material';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport React, { useState, ChangeEvent, KeyboardEvent } from 'react';\r\nimport AddCircleIcon from '@mui/icons-material/AddCircle';\r\n\r\n\r\ntype NewType = {\r\n    addItem: (title: string) => void\r\n};\r\n\r\nexport type AddItemFormType = NewType\r\n\r\n\r\nexport function AddItemForm({ addItem}: AddItemFormType) {\r\n\r\n\r\n    let [value, setValue] = useState('')\r\n\r\n    let [err, setErr] = useState('')\r\n\r\n\r\n\r\n    const onKeyDownHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        setErr('')\r\n        if (e.key === 'Enter') {\r\n            plusButton()\r\n        }\r\n    }\r\n\r\n\r\n    const plusButton = () => {\r\n        if (value.trim() !== '') {\r\n            addItem(value.trim());\r\n            setValue('');\r\n        } else setErr('err')\r\n    }\r\n\r\n\r\n    const onChabgeHandlerElement = (e: ChangeEvent<HTMLInputElement>) => { setValue(e.currentTarget.value) }\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <TextField id=\"outlined-size-small\"\r\n                    error={!!err}\r\n                    helperText={err}\r\n                    defaultValue=\"Small\"\r\n                    size=\"small\" label='type something'\r\n                    value={value}\r\n                    onChange={onChabgeHandlerElement\r\n                    } />\r\n                <IconButton onClick={() => plusButton()}>\r\n                    <AddCircleIcon />\r\n                </IconButton>\r\n        \r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","/Users/kseniatuzova/Documents/GitHub/todo-for-courses/src/components/toDoList/toDoListContainer.tsx",["61","62","63","64","65","66","67","68","69","70","71","72"],[],"/Users/kseniatuzova/Documents/GitHub/todo-for-courses/src/components/toDoList/ToDoList.tsx",["73","74","75","76","77"],[],"import { Delete } from '@mui/icons-material';\nimport IconButton from '@mui/material/IconButton';\nimport React, { useState, ChangeEvent, KeyboardEvent } from 'react';\nimport { AddItemForm } from '../../AddItemForm';\nimport { FilterType } from '../../App';\nimport { Button, Checkbox } from '@mui/material';\nimport { TaskItem } from '../taskItem/taskItem';\n\n\nexport type TasksType = {\n    task: string,\n    id: string,\n    description: string,\n    checked: boolean,\n}\n\nexport type ToDoListType = {\n    title: string,\n    tasks: Array<TasksType>,\n    deleteTask: (toDoListId: string, id: string) => void,\n    changeFilter: (toDoListId: string, value: FilterType) => void\n    addTask: (toDoListId: string, newText: string) => void\n    changeCheckBox: (toDoListId: string, id: string, checked: boolean) => void//???\n    filter: string\n    id: string\n    deleteToDoList: (id: string) => void\n}\n\n\nexport function ToDoList({\n    title,\n    tasks,\n    deleteTask,\n    changeFilter,\n    addTask,\n    changeCheckBox,\n    filter,\n    id,\n    deleteToDoList }: ToDoListType) {\n\n    //вынесли хэндлер за пределы мапа, чтобы не ограничиваться скоупом. Для этого мы в хэндлере передаем в параметре айдишку в пределах мапа, а потом мы передаем в делит таск нужную айдишку таким образом , хоть и за пределами мапа\n    const onDeleteHandler = (idItem: string) => {\n        deleteTask(id, idItem)\n    }\n    //даже те функции которые в обработчиках в методе мап нужно облегчать - пишем прямо в мап функцию, которая будет считываться при нажатии на кнопку\n    //задание- зарефакторить кселикс по этому методу\n\n\n    const onClickHandler = (param: FilterType) => {\n        changeFilter(id, param)\n    }\n\n  \n\n\n    let mapFunction = tasks.map((el: TasksType) => {\n\n       \n\n        const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n            changeCheckBox(id, el.id, e.currentTarget.checked);\n        }\n\n\n        return <div key={el.id}>\n            <TaskItem\n                checked={el.checked}\n                task={el.task}\n                onChangeHandler={onChangeHandler}\n                onDeleteHandler={onDeleteHandler} />\n        </div>\n    })\n\n\n\n\n    return (\n        <div className=\"App\">\n            <div>\n                <h3>{title}</h3>\n\n                <AddItemForm id={id} deleteToDoList={deleteToDoList} addItem={addTask} />\n\n                <ul>\n                    {mapFunction}\n\n                </ul>\n                <div>\n                    {/* <button name='delete' onClick={someFunction}>X</button>\n                    <button name='save' onClick={someFunction}>X</button> */}\n\n                    <Button color={'secondary'} variant={filter === 'All' ? 'outlined' : 'text'} onClick={() => onClickHandler('All')}>All</Button>\n                    <Button variant={filter === 'Active' ? 'outlined' : 'text'} onClick={() => onClickHandler('Active')}>Active</Button>\n                    <Button variant={filter === 'Completed' ? 'outlined' : 'text'} onClick={() => onClickHandler('Completed')}>Completed</Button>\n\n                </div>\n            </div>\n        </div>\n    );\n}\n\n\n","/Users/kseniatuzova/Documents/GitHub/todo-for-courses/src/components/taskItem/taskItem.tsx",[],[],"/Users/kseniatuzova/Documents/GitHub/todo-for-courses/src/store/redux-store.ts",[],[],"/Users/kseniatuzova/Documents/GitHub/todo-for-courses/src/store/tasksReduser.ts",["78"],[],"/Users/kseniatuzova/Documents/GitHub/todo-for-courses/src/store/toDoListReduser.ts",[],[],{"ruleId":"79","severity":1,"message":"80","line":7,"column":21,"nodeType":"81","messageId":"82","endLine":7,"endColumn":28},{"ruleId":"79","severity":1,"message":"83","line":11,"column":8,"nodeType":"81","messageId":"82","endLine":11,"endColumn":13},{"ruleId":"79","severity":1,"message":"84","line":12,"column":10,"nodeType":"81","messageId":"82","endLine":12,"endColumn":12},{"ruleId":"79","severity":1,"message":"85","line":1,"column":10,"nodeType":"81","messageId":"82","endLine":1,"endColumn":16},{"ruleId":"79","severity":1,"message":"86","line":2,"column":8,"nodeType":"81","messageId":"82","endLine":2,"endColumn":18},{"ruleId":"79","severity":1,"message":"87","line":23,"column":11,"nodeType":"81","messageId":"82","endLine":23,"endColumn":27},{"ruleId":"79","severity":1,"message":"88","line":1,"column":10,"nodeType":"81","messageId":"82","endLine":1,"endColumn":16},{"ruleId":"79","severity":1,"message":"89","line":2,"column":8,"nodeType":"81","messageId":"82","endLine":2,"endColumn":18},{"ruleId":"79","severity":1,"message":"90","line":3,"column":17,"nodeType":"81","messageId":"82","endLine":3,"endColumn":25},{"ruleId":"79","severity":1,"message":"91","line":3,"column":27,"nodeType":"81","messageId":"82","endLine":3,"endColumn":38},{"ruleId":"79","severity":1,"message":"92","line":3,"column":40,"nodeType":"81","messageId":"82","endLine":3,"endColumn":53},{"ruleId":"79","severity":1,"message":"93","line":4,"column":10,"nodeType":"81","messageId":"82","endLine":4,"endColumn":21},{"ruleId":"79","severity":1,"message":"94","line":5,"column":22,"nodeType":"81","messageId":"82","endLine":5,"endColumn":35},{"ruleId":"79","severity":1,"message":"85","line":6,"column":10,"nodeType":"81","messageId":"82","endLine":6,"endColumn":16},{"ruleId":"79","severity":1,"message":"95","line":6,"column":18,"nodeType":"81","messageId":"82","endLine":6,"endColumn":26},{"ruleId":"96","severity":1,"message":"97","line":31,"column":35,"nodeType":"98","messageId":"99","endLine":33,"endColumn":16},{"ruleId":"79","severity":1,"message":"100","line":71,"column":13,"nodeType":"81","messageId":"82","endLine":71,"endColumn":20},{"ruleId":"79","severity":1,"message":"101","line":116,"column":21,"nodeType":"81","messageId":"82","endLine":116,"endColumn":37},{"ruleId":"79","severity":1,"message":"88","line":1,"column":10,"nodeType":"81","messageId":"82","endLine":1,"endColumn":16},{"ruleId":"79","severity":1,"message":"89","line":2,"column":8,"nodeType":"81","messageId":"82","endLine":2,"endColumn":18},{"ruleId":"79","severity":1,"message":"90","line":3,"column":17,"nodeType":"81","messageId":"82","endLine":3,"endColumn":25},{"ruleId":"79","severity":1,"message":"92","line":3,"column":40,"nodeType":"81","messageId":"82","endLine":3,"endColumn":53},{"ruleId":"79","severity":1,"message":"95","line":6,"column":18,"nodeType":"81","messageId":"82","endLine":6,"endColumn":26},{"ruleId":"79","severity":1,"message":"102","line":3,"column":10,"nodeType":"81","messageId":"82","endLine":3,"endColumn":24},"@typescript-eslint/no-unused-vars","'padding' is defined but never used.","Identifier","unusedVar","'Paper' is defined but never used.","'v1' is defined but never used.","'Button' is defined but never used.","'DeleteIcon' is defined but never used.","'onKeyDownHandler' is assigned a value but never used.","'Delete' is defined but never used.","'IconButton' is defined but never used.","'useState' is defined but never used.","'ChangeEvent' is defined but never used.","'KeyboardEvent' is defined but never used.","'AddItemForm' is defined but never used.","'ToDoListsType' is defined but never used.","'Checkbox' is defined but never used.","no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","unexpected","'newTask' is assigned a value but never used.","'tasksForToDoList' is assigned a value but never used.","'TasksListsType' is defined but never used."]