[{"C:\\Users\\kseni\\Documents\\GitHub\\todo-for-courses\\src\\index.tsx":"1","C:\\Users\\kseni\\Documents\\GitHub\\todo-for-courses\\src\\serviceWorker.ts":"2","C:\\Users\\kseni\\Documents\\GitHub\\todo-for-courses\\src\\App.tsx":"3","C:\\Users\\kseni\\Documents\\GitHub\\todo-for-courses\\src\\AddItemForm.tsx":"4","C:\\Users\\kseni\\Documents\\GitHub\\todo-for-courses\\src\\ToDoList.tsx":"5","C:\\Users\\kseni\\Documents\\GitHub\\todo-for-courses\\src\\components\\button.tsx":"6"},{"size":465,"mtime":1666792185991,"results":"7","hashOfConfig":"8"},{"size":5444,"mtime":1666792185991,"results":"9","hashOfConfig":"8"},{"size":8059,"mtime":1667323015154,"results":"10","hashOfConfig":"8"},{"size":1848,"mtime":1666792185991,"results":"11","hashOfConfig":"8"},{"size":3944,"mtime":1666792185991,"results":"12","hashOfConfig":"8"},{"size":504,"mtime":1666792185991,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","suppressedMessages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1hzd8gk",{"filePath":"17","messages":"18","suppressedMessages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","suppressedMessages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26"},{"filePath":"27","messages":"28","suppressedMessages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30"},{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34"},"C:\\Users\\kseni\\Documents\\GitHub\\todo-for-courses\\src\\index.tsx",[],[],"C:\\Users\\kseni\\Documents\\GitHub\\todo-for-courses\\src\\serviceWorker.ts",[],[],"C:\\Users\\kseni\\Documents\\GitHub\\todo-for-courses\\src\\App.tsx",[],[],"C:\\Users\\kseni\\Documents\\GitHub\\todo-for-courses\\src\\AddItemForm.tsx",["35"],[],"import React, { useState, ChangeEvent, KeyboardEvent} from 'react';\r\n\r\n\r\n\r\nexport type AddItemFormType = {\r\n    addItem: ( toDoListId: string,title: string) => void \r\n    id:string\r\n    deleteToDoList:(id:string)=>void\r\n    addToDoList:(title:string)=>void\r\n}\r\n\r\n\r\nexport function AddItemForm({ addItem, id ,deleteToDoList,addToDoList}: AddItemFormType) {\r\n\r\n    \r\n        let [value, setValue] = useState('')\r\n    \r\n        let [err,setErr]=useState('')\r\n    \r\n   \r\n        const onChabgeHandlerElement = (e: ChangeEvent<HTMLInputElement>) => { setValue(e.currentTarget.value) }\r\n    \r\n        const plusButton = () => {\r\n            \r\n            if(value.trim()!==''){\r\n                //убираем айдишку\r\n                addItem( id, value.trim()); \r\n                setValue('');\r\n            } else setErr('err')\r\n        \r\n           \r\n        }\r\n       \r\n            const onDeleteListClickHandler=()=>{        \r\n             deleteToDoList(id)   \r\n            }\r\n    \r\n            const onaddToDoListClickHandler=()=>{        \r\n              \r\n               }\r\n       \r\n       \r\n        const onKeyDownHandler= (e: KeyboardEvent<HTMLInputElement>) =>{\r\n            setErr('')\r\n            if (e.key === 'Enter') {\r\n                plusButton()\r\n            }\r\n        }\r\n        return (\r\n     \r\n                <div>\r\n           \r\n                    <button onClick={onDeleteListClickHandler}>x</button>\r\n                    <div>\r\n                        <input value={value} onChange={onChabgeHandlerElement\r\n                        } onKeyPress={onKeyDownHandler} className={err&&'erorr'}/>\r\n                        <button onClick={plusButton}>+</button>\r\n                    </div>\r\n                    {err&& <div className=\"err\">erorr</div>}\r\n                   \r\n                </div>\r\n   \r\n        );\r\n    }\r\n    ","C:\\Users\\kseni\\Documents\\GitHub\\todo-for-courses\\src\\ToDoList.tsx",["36","37","38"],[],"import React, { useState, ChangeEvent, KeyboardEvent} from 'react';\r\nimport { AddItemForm } from './AddItemForm';\r\nimport { FilterType } from './App';\r\nimport { Button } from './components/button';\r\n\r\n\r\nexport type TasksType = {\r\n    task: string,\r\n    id: string,\r\n    description: string,\r\n    checked: boolean,\r\n}\r\n\r\nexport type ToDoListType = {\r\n    title: string,\r\n    tasks: Array<TasksType>,\r\n    deleteTask: (toDoListId: string, id: string) => void,\r\n    changeFilter: ( toDoListId:string, value: FilterType) => void\r\n    addTask: (toDoListId: string, newText: string) => void \r\n    changeCheckBox:(toDoListId: string, id:string, checked:boolean )=>void//???\r\n    filter:string\r\n    id:string\r\n    deleteToDoList:(id:string)=>void\r\n}\r\n\r\n\r\nexport function ToDoList({ title, tasks, deleteTask, changeFilter, addTask, changeCheckBox, filter, id ,deleteToDoList}: ToDoListType) {\r\n\r\n//вынесли хэндлер за пределы мапа, чтобы не ограничиваться скоупом. Для этого мы в хэндлере передаем в параметре айдишку в пределах мапа, а потом мы передаем в делит таск нужную айдишку таким образом , хоть и за пределами мапа\r\n    const onDeleteHandler=(idItem:string)=>{\r\n        deleteTask(id, idItem)\r\n    }\r\n//даже те функции которые в обработчиках в методе мап нужно облегчать - пишем прямо в мап функцию, которая будет считываться при нажатии на кнопку\r\n//задание- зарефакторить кселикс по этому методу\r\n    let mapFunction = tasks.map((el: any) => {\r\n      \r\n        const onChangeHandler=(e: ChangeEvent<HTMLInputElement>)=>{ \r\n            changeCheckBox(id, el.id, e.currentTarget.checked);\r\n        }\r\n        \r\n\r\n        return <li className={el.checked?'checked':''} key={el.id}>\r\n            <input type=\"checkbox\" checked={el.checked} onChange={onChangeHandler}\r\n/>\r\n            <span>{el.task}</span>\r\n            <button onClick={()=>onDeleteHandler(el.id)}>x</button>\r\n            </li>\r\n    })\r\n\r\n    let [value, setValue] = useState('')\r\n\r\n    let [err,setErr]=useState('')\r\n\r\n    //мы не должны писать функции в обработчиках событий, поэтому мы должны их выносить \r\n\r\n    const plusButton = () => {\r\n        \r\n        if(value.trim()!==''){\r\n            addTask(id, value.trim()); \r\n            setValue('');\r\n        } else setErr('err')\r\n    \r\n       \r\n    }\r\n    \r\n    const onClickHandler=(param:FilterType)=>{\r\n        changeFilter(id, param)\r\n    }\r\n\r\n\r\n   function addTodoList(){\r\n\r\n   }\r\n//ПОЧЕМУ_ТО НЕ МОГУ ТИПИЗИРОВАТЬ ЭВЕНТ\r\n   function someFunction(event:any){\r\nalert(event.currentTarget.name)\r\n   }\r\n    return (\r\n        <div className=\"App\">\r\n            <div>\r\n                <h3>{title}</h3>\r\n                \r\n                <AddItemForm addItem={addTask} id={id} deleteToDoList={deleteToDoList} addToDoList={addTodoList} />\r\n               \r\n                <ul>\r\n                    {mapFunction}\r\n\r\n                </ul>\r\n                <div>\r\n                    <button name='delete' onClick={someFunction}>X</button>\r\n                    <button name='save' onClick={someFunction}>X</button>\r\n                    <Button className={filter==='All'?'active_btn':''} name='All' callBack={()=>onClickHandler('All') }/>\r\n\r\n                    <Button className={filter==='Active'?'active_btn':''} name='Active' callBack={()=>onClickHandler('Active') }/>\r\n\r\n                    <Button className={filter==='Completed'?'active_btn':''} name='Completed' callBack={()=>onClickHandler('Completed') }/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n","C:\\Users\\kseni\\Documents\\GitHub\\todo-for-courses\\src\\components\\button.tsx",["39","40"],[],"import React, { useState } from 'react';\r\nimport { v1 } from 'uuid';\r\n\r\n\r\n\r\n\r\n\r\nexport type FilterType = 'All' | 'Active' | 'Completed'\r\n\r\n\r\nexport type ButtonType = {\r\n    name: string,\r\n    callBack:()=>void\r\n    className:any\r\n}\r\n\r\n\r\nexport function Button({name, callBack, className}:ButtonType) {\r\n\r\n    const onClickHandler=()=>{\r\n        callBack()\r\n    }\r\n\r\n    return (\r\n        <button className={className} onClick={()=>onClickHandler()}>\r\n         {name}\r\n        </button>\r\n    );\r\n}\r\n\r\n\r\n\r\n",{"ruleId":"41","severity":1,"message":"42","line":38,"column":19,"nodeType":"43","messageId":"44","endLine":38,"endColumn":44},{"ruleId":"41","severity":1,"message":"45","line":1,"column":40,"nodeType":"43","messageId":"44","endLine":1,"endColumn":53},{"ruleId":"41","severity":1,"message":"46","line":52,"column":10,"nodeType":"43","messageId":"44","endLine":52,"endColumn":13},{"ruleId":"41","severity":1,"message":"47","line":56,"column":11,"nodeType":"43","messageId":"44","endLine":56,"endColumn":21},{"ruleId":"41","severity":1,"message":"48","line":1,"column":17,"nodeType":"43","messageId":"44","endLine":1,"endColumn":25},{"ruleId":"41","severity":1,"message":"49","line":2,"column":10,"nodeType":"43","messageId":"44","endLine":2,"endColumn":12},"@typescript-eslint/no-unused-vars","'onaddToDoListClickHandler' is assigned a value but never used.","Identifier","unusedVar","'KeyboardEvent' is defined but never used.","'err' is assigned a value but never used.","'plusButton' is assigned a value but never used.","'useState' is defined but never used.","'v1' is defined but never used."]