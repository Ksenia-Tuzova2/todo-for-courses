[{"/Users/kseniatuzova/Documents/GitHub/todo-for-courses/src/index.tsx":"1","/Users/kseniatuzova/Documents/GitHub/todo-for-courses/src/serviceWorker.ts":"2","/Users/kseniatuzova/Documents/GitHub/todo-for-courses/src/App.tsx":"3","/Users/kseniatuzova/Documents/GitHub/todo-for-courses/src/components/toDoList/ToDoList.tsx":"4","/Users/kseniatuzova/Documents/GitHub/todo-for-courses/src/components/taskItem/taskItem.tsx":"5","/Users/kseniatuzova/Documents/GitHub/todo-for-courses/src/store/redux-store.ts":"6","/Users/kseniatuzova/Documents/GitHub/todo-for-courses/src/store/tasksReduser.ts":"7","/Users/kseniatuzova/Documents/GitHub/todo-for-courses/src/store/toDoListReduser.ts":"8","/Users/kseniatuzova/Documents/GitHub/todo-for-courses/src/api/tasksApi.ts":"9","/Users/kseniatuzova/Documents/GitHub/todo-for-courses/src/api/instance.ts":"10","/Users/kseniatuzova/Documents/GitHub/todo-for-courses/src/api/authApi.ts":"11","/Users/kseniatuzova/Documents/GitHub/todo-for-courses/src/components/AddItemForm.tsx":"12","/Users/kseniatuzova/Documents/GitHub/todo-for-courses/src/components/toDoList/ToDoListMap.tsx":"13","/Users/kseniatuzova/Documents/GitHub/todo-for-courses/src/api/todoApi.ts":"14","/Users/kseniatuzova/Documents/GitHub/todo-for-courses/src/store/authReduser.ts":"15","/Users/kseniatuzova/Documents/GitHub/todo-for-courses/src/components/toDoList/filter.tsx":"16","/Users/kseniatuzova/Documents/GitHub/todo-for-courses/src/loadingSpiner/loadingSpiner.tsx":"17"},{"size":647,"mtime":1679050292958,"results":"18","hashOfConfig":"19"},{"size":5295,"mtime":1678366078912,"results":"20","hashOfConfig":"19"},{"size":2455,"mtime":1680014103239,"results":"21","hashOfConfig":"19"},{"size":2707,"mtime":1679568196600,"results":"22","hashOfConfig":"19"},{"size":5880,"mtime":1679308241945,"results":"23","hashOfConfig":"19"},{"size":937,"mtime":1678624398367,"results":"24","hashOfConfig":"19"},{"size":6222,"mtime":1679402617169,"results":"25","hashOfConfig":"19"},{"size":3947,"mtime":1679567856992,"results":"26","hashOfConfig":"19"},{"size":2870,"mtime":1680013343475,"results":"27","hashOfConfig":"19"},{"size":1044,"mtime":1679568905714,"results":"28","hashOfConfig":"19"},{"size":440,"mtime":1678627577929,"results":"29","hashOfConfig":"19"},{"size":1727,"mtime":1679313635109,"results":"30","hashOfConfig":"19"},{"size":1297,"mtime":1678624294859,"results":"31","hashOfConfig":"19"},{"size":1814,"mtime":1679571758628,"results":"32","hashOfConfig":"19"},{"size":2887,"mtime":1679402772241,"results":"33","hashOfConfig":"19"},{"size":1696,"mtime":1679306697494,"results":"34","hashOfConfig":"19"},{"size":295,"mtime":1673719395834,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},"1nsgywz",{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"39"},{"filePath":"53","messages":"54","suppressedMessages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"56","messages":"57","suppressedMessages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"59","messages":"60","suppressedMessages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","suppressedMessages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"65","messages":"66","suppressedMessages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","suppressedMessages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"71","messages":"72","suppressedMessages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"74","messages":"75","suppressedMessages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"77","messages":"78","suppressedMessages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"80","messages":"81","suppressedMessages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"83","messages":"84","suppressedMessages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"39"},{"filePath":"87","messages":"88","suppressedMessages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/kseniatuzova/Documents/GitHub/todo-for-courses/src/index.tsx",[],[],[],"/Users/kseniatuzova/Documents/GitHub/todo-for-courses/src/serviceWorker.ts",[],[],"/Users/kseniatuzova/Documents/GitHub/todo-for-courses/src/App.tsx",["90"],[],"/Users/kseniatuzova/Documents/GitHub/todo-for-courses/src/components/toDoList/ToDoList.tsx",["91","92"],[],"/Users/kseniatuzova/Documents/GitHub/todo-for-courses/src/components/taskItem/taskItem.tsx",["93","94","95","96","97","98","99"],[],"import { Delete } from '@mui/icons-material';\nimport CreateIcon from '@mui/icons-material/Create';\nimport IconButton from '@mui/material/IconButton';\nimport { Checkbox } from '@mui/material';\nimport { ChangeEvent, useCallback, useState } from 'react';\nimport { changeChecBoxAC, changeTaskTitleRequest, PriorityTaskType, StatusTaskType, TasksType } from '../../store/tasksReduser';\nimport { UseAppDispatch } from '../../store/redux-store';\nimport React from 'react';\n\n\nexport type PropsTaskType = {\n    // onChangeCheckBoxHandler: (e: ChangeEvent<HTMLInputElement>) => void,\n    onDeleteHandler: (idItem: string) => void,\n}\n\n\nexport const TaskItem = React.memo(({\n    //можно все данные распаковать в юзселекторе\n    todoListId,\n    completed,\n    title,\n    onDeleteHandler,\n    id\n}: PropsTaskType & TasksType) => {\n\n    const[disabledButtonState,setDisabledButtonState ]=useState(false)\n\n\n    const dispatch = UseAppDispatch()\n    const [editMode, setEditMode] = useState<boolean>(false)\n\n    let [taskInputValue, setTaskInputValue] = useState<string>('')\n\n    let [descriptionInputValue, setDescriptionInputValue] = useState<string>('')\n\n    let [startDateInputValue, setStartDateInputValue] = useState<string>('')\n\n\n    let [deadlineInputValue, setDeadlineInputValue] = useState<string>('')\n\n\n    let [statusInputValue, setStatusInputValue] = useState<StatusTaskType>(0)\n\n    let [priorityInputValue, setPriorityInputValue] = useState<PriorityTaskType>(0)\n\n    let [orderInputValue, setOrderInputValue] = useState<number>(0)\n\n    let [completedInputValue, setCompletedInputValue] = useState<boolean>(false)\n\n\n\n    let upateInputValueChangeHandler = (newtext: string) => {\n        setTaskInputValue(newtext)\n    }\n\n    let updatePriorityInputValueChangeHandler = (newValue: number) => {\n\n\n    }\n\n\n    const changeEditModeHandler: any = useCallback((e: React.MouseEvent<HTMLSpanElement, MouseEvent>) => {\n        setEditMode(true)\n    }, [])\n\n    const onBlurCallback = useCallback((e: React.FocusEvent<HTMLInputElement>) => {\n        // выключить editMode при нажатии за пределами инпута\n        setEditMode(false)\n\n        //здесь что-то не то\n        dispatch(changeTaskTitleRequest( todoListId,id, e.currentTarget.value))\n\n    }, [dispatch])\n\n    const changeCheckBoxHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        dispatch(changeChecBoxAC(e.currentTarget.checked, todoListId, id,))\n    }\n\n\n\n    return (\n        <li className={completed ? 'completed' : ''}>\n\n            {editMode ? (\n                <>\n                    <input\n                        name='order'\n                        // не понимаю почему намбер не работает\n                        type={'number'}\n                        placeholder='Add priority'\n                        step='1'\n                        min=\"0\" max=\"10\"\n                        onChange={(e) => setOrderInputValue(+e.currentTarget.value)}\n                        value={orderInputValue}\n                        onBlur={onBlurCallback}\n                    />\n                    \n                    <input\n                    placeholder='Set title'\n                        onChange={(e) => upateInputValueChangeHandler(e.currentTarget.value)}\n                        value={taskInputValue}\n                        onBlur={onBlurCallback} />\n<br />\n                    <textarea\n                        name='decription'\n                        placeholder='there is no description yet'\n                        onChange={(e) => setDescriptionInputValue(e.currentTarget.value)}\n                        value={descriptionInputValue}\n                    />\n                    <br />\n                    Priority: <input\n                        name='priority'\n                        // не понимаю почему намбер не работает\n                        type={\"number\"}\n                        placeholder='Add priority'\n                        step='1'\n                        min=\"0\" max=\"10\"\n                        onChange={(e) => setPriorityInputValue(+e.currentTarget.value)}\n                        value={priorityInputValue}\n                        onBlur={onBlurCallback}\n                    />\n\n<br />\n                    Start date: <input\n                        name='addDate'\n                        type='date'\n                        onChange={(e) => setStartDateInputValue(e.currentTarget.value)}\n                        value={startDateInputValue}\n                        onBlur={onBlurCallback}\n                    />\n<br />\n                   Deadline: <input\n                        name='deadline'\n                        type='date'\n                        onChange={(e) => setDeadlineInputValue(e.currentTarget.value)}\n                        value={deadlineInputValue}\n                        onBlur={onBlurCallback}\n                    />\n           <br />\n\n                </>\n            ) : (\n                <span onDoubleClick={\n                    (e) => changeEditModeHandler}>\n                    {orderInputValue}.  {title}\n                </span>\n            )}\n\n            <Checkbox\n            disabled={disabledButtonState} \n                checked={completed}\n                onChange={(e) => changeCheckBoxHandler(e)}\n            />\n            <IconButton \n            disabled={disabledButtonState} \n            aria-label=\"delete\"\n                onClick={() => onDeleteHandler(id)}>\n                <Delete />\n            </IconButton>\n\n            <IconButton \n            aria-label=\"create\"\n            disabled={disabledButtonState} \n                onClick={() => changeEditModeHandler()}\n                onBlur={() => onBlurCallback}\n            >\n                <CreateIcon />\n            </IconButton>\n\n        </li>)\n}\n)\n\n","/Users/kseniatuzova/Documents/GitHub/todo-for-courses/src/store/redux-store.ts",[],[],"/Users/kseniatuzova/Documents/GitHub/todo-for-courses/src/store/tasksReduser.ts",[],[],"/Users/kseniatuzova/Documents/GitHub/todo-for-courses/src/store/toDoListReduser.ts",[],[],"/Users/kseniatuzova/Documents/GitHub/todo-for-courses/src/api/tasksApi.ts",["100","101"],[],"/Users/kseniatuzova/Documents/GitHub/todo-for-courses/src/api/instance.ts",[],[],"/Users/kseniatuzova/Documents/GitHub/todo-for-courses/src/api/authApi.ts",[],[],"/Users/kseniatuzova/Documents/GitHub/todo-for-courses/src/components/AddItemForm.tsx",[],[],"/Users/kseniatuzova/Documents/GitHub/todo-for-courses/src/components/toDoList/ToDoListMap.tsx",[],[],"/Users/kseniatuzova/Documents/GitHub/todo-for-courses/src/api/todoApi.ts",["102"],[],"/Users/kseniatuzova/Documents/GitHub/todo-for-courses/src/store/authReduser.ts",[],[],"/Users/kseniatuzova/Documents/GitHub/todo-for-courses/src/components/toDoList/filter.tsx",["103"],[],"import {  useCallback, useState } from 'react';\nimport { Button} from '@mui/material';\nimport {  UseAppDispatch } from '../../store/redux-store';\nimport { changeFilterAc, FilterType } from '../../store/toDoListReduser';\nimport React from 'react';\n\nexport type FilterPropsType = {\n    filter: FilterType,\n    todoId: string\n}\n\n\nexport const Filter=React.memo(({\n    filter,\n    todoId }: FilterPropsType)=> {\n\n    let dispatch = UseAppDispatch()\n    const[disabledButtonState,setDisabledButtonState ]=useState(false)\n\n\n\n\n    \n    const changeFilterHandler = useCallback((param: FilterType)=>{\n\n        setDisabledButtonState(true)\n        dispatch(changeFilterAc(todoId, param))\n        setDisabledButtonState(false)\n \n    },[])\n    \n\n\n\n    return (\n      \n                <div>\n                    <Button  \n                    disabled={disabledButtonState}  \n                    color={'secondary'} \n                    variant={filter === 'All' ? 'outlined' : 'text'} \n                    onClick={() => changeFilterHandler('All')}>\n                        All\n                    </Button>\n\n                    <Button \n                     disabled={disabledButtonState} \n                    variant={filter === 'Active' ? 'outlined' : 'text'} \n                    onClick={() => changeFilterHandler('Active')}>Active\n                    </Button>\n\n                    <Button\n                     disabled={disabledButtonState} \n                    variant={filter === 'Completed' ? 'outlined' : 'text'} \n                    onClick={() => {changeFilterHandler('Completed')}} >\n                        Completed\n                    </Button>\n\n                </div>\n           \n    );\n})\n\n\n","/Users/kseniatuzova/Documents/GitHub/todo-for-courses/src/loadingSpiner/loadingSpiner.tsx",[],[],{"ruleId":"104","severity":1,"message":"105","line":36,"column":9,"nodeType":"106","endLine":36,"endColumn":11,"suggestions":"107"},{"ruleId":"104","severity":1,"message":"108","line":41,"column":7,"nodeType":"106","endLine":41,"endColumn":9,"suggestions":"109"},{"ruleId":"104","severity":1,"message":"110","line":47,"column":7,"nodeType":"106","endLine":47,"endColumn":9,"suggestions":"111"},{"ruleId":"112","severity":1,"message":"113","line":26,"column":31,"nodeType":"114","messageId":"115","endLine":26,"endColumn":53},{"ruleId":"112","severity":1,"message":"116","line":42,"column":10,"nodeType":"114","messageId":"115","endLine":42,"endColumn":26},{"ruleId":"112","severity":1,"message":"117","line":42,"column":28,"nodeType":"114","messageId":"115","endLine":42,"endColumn":47},{"ruleId":"112","severity":1,"message":"118","line":48,"column":10,"nodeType":"114","messageId":"115","endLine":48,"endColumn":29},{"ruleId":"112","severity":1,"message":"119","line":48,"column":31,"nodeType":"114","messageId":"115","endLine":48,"endColumn":53},{"ruleId":"112","severity":1,"message":"120","line":56,"column":9,"nodeType":"114","messageId":"115","endLine":56,"endColumn":46},{"ruleId":"104","severity":1,"message":"121","line":73,"column":8,"nodeType":"106","endLine":73,"endColumn":18,"suggestions":"122"},{"ruleId":"112","severity":1,"message":"123","line":1,"column":10,"nodeType":"114","messageId":"115","endLine":1,"endColumn":26},{"ruleId":"112","severity":1,"message":"124","line":1,"column":28,"nodeType":"114","messageId":"115","endLine":1,"endColumn":42},{"ruleId":"112","severity":1,"message":"125","line":1,"column":8,"nodeType":"114","messageId":"115","endLine":1,"endColumn":13},{"ruleId":"104","severity":1,"message":"110","line":30,"column":7,"nodeType":"106","endLine":30,"endColumn":9,"suggestions":"126"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["127"],"React Hook useCallback has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["128"],"React Hook useCallback has missing dependencies: 'dispatch' and 'todoId'. Either include them or remove the dependency array.",["129"],"@typescript-eslint/no-unused-vars","'setDisabledButtonState' is assigned a value but never used.","Identifier","unusedVar","'statusInputValue' is assigned a value but never used.","'setStatusInputValue' is assigned a value but never used.","'completedInputValue' is assigned a value but never used.","'setCompletedInputValue' is assigned a value but never used.","'updatePriorityInputValueChangeHandler' is assigned a value but never used.","React Hook useCallback has missing dependencies: 'id' and 'todoListId'. Either include them or remove the dependency array.",["130"],"'PriorityTaskType' is defined but never used.","'StatusTaskType' is defined but never used.","'axios' is defined but never used.",["131"],{"desc":"132","fix":"133"},{"desc":"132","fix":"134"},{"desc":"135","fix":"136"},{"desc":"137","fix":"138"},{"desc":"135","fix":"139"},"Update the dependencies array to be: [dispatch]",{"range":"140","text":"141"},{"range":"142","text":"141"},"Update the dependencies array to be: [dispatch, todoId]",{"range":"143","text":"144"},"Update the dependencies array to be: [dispatch, id, todoListId]",{"range":"145","text":"146"},{"range":"147","text":"144"},[1200,1202],"[dispatch]",[1325,1327],[1457,1459],"[dispatch, todoId]",[2236,2246],"[dispatch, id, todoListId]",[724,726]]