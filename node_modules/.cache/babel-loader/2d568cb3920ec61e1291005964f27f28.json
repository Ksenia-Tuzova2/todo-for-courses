{"ast":null,"code":"var _jsxFileName = \"/Users/kseniatuzova/Documents/GitHub/todo-for-courses/todo-number2/src/App.tsx\";\nimport React, { useState } from 'react';\nimport { v1 } from 'uuid';\nimport './App.css';\nimport { ToDoList } from './ToDoList';\n\nfunction App() {\n  let [tasks, setTasks] = useState([{\n    task: 'js',\n    id: v1(),\n    description: 'something',\n    checked: true\n  }, {\n    task: 'sccs',\n    id: v1(),\n    description: 'something',\n    checked: true\n  }, {\n    task: 'html',\n    id: v1(),\n    description: 'something',\n    checked: false\n  }]);\n\n  function changeCheckBox(id, checked) {\n    let task = tasks.find(t => t.id === id);\n\n    if (task) {\n      task.checked = checked;\n    } //создаем видимость того, что здесь лежит что-то новое\n    // let copy=[...tasks]\n    // setTasks(copy)\n    //сокращенный вариант\n\n\n    setTasks([...tasks]);\n  }\n\n  let [filter, setFilter] = useState('Active');\n\n  function addTask(newtext) {\n    if (newtext.trim() !== '') {\n      let newTask = {\n        task: newtext,\n        id: v1(),\n        description: '',\n        checked: false\n      };\n      setTasks([newTask, ...tasks]);\n    }\n  }\n\n  function changeFilter(value, toDoListId) {\n    let toDoList = setFilter(value);\n  }\n\n  let tasksForFilter = tasks;\n\n  if (filter === 'Completed') {\n    //без ретурна!!! присваеваем фильтр\n    tasksForFilter = tasks.filter(el => el.checked === true);\n  }\n\n  if (filter === 'Active') {\n    tasksForFilter = tasks.filter(el => el.checked === false);\n  }\n\n  function deleteTask(id) {\n    let filtredTasks = tasks.filter(el => {\n      return el.id !== id;\n    });\n    setTasks(filtredTasks);\n  }\n\n  let [toDoLists, setToDoList] = useState([{\n    title: 'what to learn',\n    id: v1(),\n    filter: 'Completed'\n  }, {\n    title: 'what to buy',\n    id: v1(),\n    filter: 'Active'\n  }, {\n    title: 'what i want',\n    id: v1(),\n    filter: 'Completed'\n  }]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 9\n    }\n  }, toDoLists.map(el => {\n    return /*#__PURE__*/React.createElement(ToDoList //не забудь добавить кей в мап\n    , {\n      key: el.id,\n      id: el.id,\n      title: el.title,\n      tasks: tasksForFilter,\n      deleteTask: deleteTask,\n      changeFilter: changeFilter,\n      addTask: addTask,\n      changeCheckBox: changeCheckBox,\n      filter: el.filter,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 28\n      }\n    });\n  }));\n}\n\nexport default App;","map":{"version":3,"names":["React","useState","v1","ToDoList","App","tasks","setTasks","task","id","description","checked","changeCheckBox","find","t","filter","setFilter","addTask","newtext","trim","newTask","changeFilter","value","toDoListId","toDoList","tasksForFilter","el","deleteTask","filtredTasks","toDoLists","setToDoList","title","map"],"sources":["/Users/kseniatuzova/Documents/GitHub/todo-for-courses/todo-number2/src/App.tsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { v1 } from 'uuid';\r\nimport './App.css';\r\nimport { ToDoList } from './ToDoList';\r\n\r\n\r\n\r\nexport type FilterType = 'All' | 'Active' | 'Completed'\r\n\r\n\r\nexport type ToDoListsType = {\r\n    title: string,\r\n    id: string,\r\n    filter: FilterType\r\n}\r\n\r\n\r\nfunction App() {\r\n\r\n\r\n    let [tasks, setTasks] = useState([\r\n        {\r\n            task: 'js',\r\n            id: v1(),\r\n            description: 'something',\r\n            checked: true,\r\n        },\r\n        {\r\n            task: 'sccs',\r\n            id: v1(),\r\n            description: 'something',\r\n            checked: true,\r\n        },\r\n        {\r\n            task: 'html',\r\n            id: v1(),\r\n            description: 'something',\r\n            checked: false,\r\n        },\r\n    ])\r\n\r\n\r\n\r\n\r\n    function changeCheckBox(id: string, checked: boolean) {\r\n\r\n        let task = tasks.find(t => t.id === id)\r\n        if (task) {\r\n            task.checked = checked;\r\n        }\r\n        //создаем видимость того, что здесь лежит что-то новое\r\n        // let copy=[...tasks]\r\n        // setTasks(copy)\r\n\r\n        //сокращенный вариант\r\n        setTasks([...tasks])\r\n\r\n    }\r\n\r\n    let [filter, setFilter] = useState<FilterType>('Active')\r\n\r\n\r\n\r\n    function addTask(newtext: string) {\r\n        if (newtext.trim() !== '') {\r\n            let newTask = {\r\n                task: newtext,\r\n                id: v1(),\r\n                description: '',\r\n                checked: false,\r\n            }\r\n            setTasks([newTask, ...tasks])\r\n        }\r\n\r\n    }\r\n\r\n    function changeFilter(value: FilterType, toDoListId: string) {\r\n        let toDoList=\r\n        setFilter(value)\r\n    }\r\n\r\n    let tasksForFilter = tasks\r\n\r\n\r\n\r\n    if (filter === 'Completed') {\r\n        //без ретурна!!! присваеваем фильтр\r\n        tasksForFilter = tasks.filter(\r\n            el => el.checked === true\r\n        )\r\n    }\r\n\r\n\r\n    if (filter === 'Active') {\r\n        tasksForFilter = tasks.filter(\r\n            el => el.checked === false\r\n        )\r\n    }\r\n\r\n\r\n\r\n    function deleteTask(id: string) {\r\n\r\n        let filtredTasks = tasks.filter((el) => { return el.id !== id })\r\n        setTasks(filtredTasks)\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    let [toDoLists, setToDoList]=useState<Array<ToDoListsType>>([\r\n        {\r\n            title: 'what to learn',\r\n            id: v1(),\r\n            filter: 'Completed'\r\n        },\r\n        {\r\n            title: 'what to buy',\r\n            id: v1(),\r\n            filter: 'Active'\r\n        },\r\n        {\r\n            title: 'what i want',\r\n            id: v1(),\r\n            filter: 'Completed'\r\n        },\r\n    ])\r\n    return (\r\n        <div className=\"App\">\r\n\r\n            {\r\n                toDoLists.map((el: any) => {\r\n                    return <ToDoList\r\n                        //не забудь добавить кей в мап\r\n                        key={el.id}\r\n                        id={el.id}\r\n                        title={el.title}\r\n                        tasks={tasksForFilter}\r\n                        deleteTask={deleteTask}\r\n                        changeFilter={changeFilter}\r\n                        addTask={addTask}\r\n                        changeCheckBox={changeCheckBox}\r\n                        filter={el.filter} />\r\n                })\r\n            }\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default App;\r\n"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,EAAT,QAAmB,MAAnB;AACA,OAAO,WAAP;AACA,SAASC,QAAT,QAAyB,YAAzB;;AAcA,SAASC,GAAT,GAAe;EAGX,IAAI,CAACC,KAAD,EAAQC,QAAR,IAAoBL,QAAQ,CAAC,CAC7B;IACIM,IAAI,EAAE,IADV;IAEIC,EAAE,EAAEN,EAAE,EAFV;IAGIO,WAAW,EAAE,WAHjB;IAIIC,OAAO,EAAE;EAJb,CAD6B,EAO7B;IACIH,IAAI,EAAE,MADV;IAEIC,EAAE,EAAEN,EAAE,EAFV;IAGIO,WAAW,EAAE,WAHjB;IAIIC,OAAO,EAAE;EAJb,CAP6B,EAa7B;IACIH,IAAI,EAAE,MADV;IAEIC,EAAE,EAAEN,EAAE,EAFV;IAGIO,WAAW,EAAE,WAHjB;IAIIC,OAAO,EAAE;EAJb,CAb6B,CAAD,CAAhC;;EAwBA,SAASC,cAAT,CAAwBH,EAAxB,EAAoCE,OAApC,EAAsD;IAElD,IAAIH,IAAI,GAAGF,KAAK,CAACO,IAAN,CAAWC,CAAC,IAAIA,CAAC,CAACL,EAAF,KAASA,EAAzB,CAAX;;IACA,IAAID,IAAJ,EAAU;MACNA,IAAI,CAACG,OAAL,GAAeA,OAAf;IACH,CALiD,CAMlD;IACA;IACA;IAEA;;;IACAJ,QAAQ,CAAC,CAAC,GAAGD,KAAJ,CAAD,CAAR;EAEH;;EAED,IAAI,CAACS,MAAD,EAASC,SAAT,IAAsBd,QAAQ,CAAa,QAAb,CAAlC;;EAIA,SAASe,OAAT,CAAiBC,OAAjB,EAAkC;IAC9B,IAAIA,OAAO,CAACC,IAAR,OAAmB,EAAvB,EAA2B;MACvB,IAAIC,OAAO,GAAG;QACVZ,IAAI,EAAEU,OADI;QAEVT,EAAE,EAAEN,EAAE,EAFI;QAGVO,WAAW,EAAE,EAHH;QAIVC,OAAO,EAAE;MAJC,CAAd;MAMAJ,QAAQ,CAAC,CAACa,OAAD,EAAU,GAAGd,KAAb,CAAD,CAAR;IACH;EAEJ;;EAED,SAASe,YAAT,CAAsBC,KAAtB,EAAyCC,UAAzC,EAA6D;IACzD,IAAIC,QAAQ,GACZR,SAAS,CAACM,KAAD,CADT;EAEH;;EAED,IAAIG,cAAc,GAAGnB,KAArB;;EAIA,IAAIS,MAAM,KAAK,WAAf,EAA4B;IACxB;IACAU,cAAc,GAAGnB,KAAK,CAACS,MAAN,CACbW,EAAE,IAAIA,EAAE,CAACf,OAAH,KAAe,IADR,CAAjB;EAGH;;EAGD,IAAII,MAAM,KAAK,QAAf,EAAyB;IACrBU,cAAc,GAAGnB,KAAK,CAACS,MAAN,CACbW,EAAE,IAAIA,EAAE,CAACf,OAAH,KAAe,KADR,CAAjB;EAGH;;EAID,SAASgB,UAAT,CAAoBlB,EAApB,EAAgC;IAE5B,IAAImB,YAAY,GAAGtB,KAAK,CAACS,MAAN,CAAcW,EAAD,IAAQ;MAAE,OAAOA,EAAE,CAACjB,EAAH,KAAUA,EAAjB;IAAqB,CAA5C,CAAnB;IACAF,QAAQ,CAACqB,YAAD,CAAR;EAGH;;EAKD,IAAI,CAACC,SAAD,EAAYC,WAAZ,IAAyB5B,QAAQ,CAAuB,CACxD;IACI6B,KAAK,EAAE,eADX;IAEItB,EAAE,EAAEN,EAAE,EAFV;IAGIY,MAAM,EAAE;EAHZ,CADwD,EAMxD;IACIgB,KAAK,EAAE,aADX;IAEItB,EAAE,EAAEN,EAAE,EAFV;IAGIY,MAAM,EAAE;EAHZ,CANwD,EAWxD;IACIgB,KAAK,EAAE,aADX;IAEItB,EAAE,EAAEN,EAAE,EAFV;IAGIY,MAAM,EAAE;EAHZ,CAXwD,CAAvB,CAArC;EAiBA,oBACI;IAAK,SAAS,EAAC,KAAf;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GAGQc,SAAS,CAACG,GAAV,CAAeN,EAAD,IAAa;IACvB,oBAAO,oBAAC,QAAD,CACH;IADG;MAEH,GAAG,EAAEA,EAAE,CAACjB,EAFL;MAGH,EAAE,EAAEiB,EAAE,CAACjB,EAHJ;MAIH,KAAK,EAAEiB,EAAE,CAACK,KAJP;MAKH,KAAK,EAAEN,cALJ;MAMH,UAAU,EAAEE,UANT;MAOH,YAAY,EAAEN,YAPX;MAQH,OAAO,EAAEJ,OARN;MASH,cAAc,EAAEL,cATb;MAUH,MAAM,EAAEc,EAAE,CAACX,MAVR;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,EAAP;EAWH,CAZD,CAHR,CADJ;AAqBH;;AAGD,eAAeV,GAAf"},"metadata":{},"sourceType":"module"}