{"ast":null,"code":"var _jsxFileName = \"/Users/kseniatuzova/Downloads/todo-number2/src/App.tsx\";\nimport React, { useState } from 'react';\nimport { v1 } from 'uuid';\nimport './App.css';\nimport { ToDoList } from './ToDoList'; //первое занятие- разбираемся как прокидывать пропсы и использовать типы , как создавать компоненты в других файлах\n//занятие второе - учимся дебажить, писать мап, onclick,\n//когда хотим что-то поменять в интерфейсе - думаем про то как изменить данные\n//учимся удалять таски - пишем функцию, но чтобы удалить что-то нужны входные данные - айдишка, вызываем эту функцию в онклике , передаем туда айди, присваеваем старому массиву новый отфлитрованный внутри функции по таким параметрам - верни мне все кроме той, что пришла в параметрах\n//присваеваем стейту таски сеттаск и юзстейт\n//в функции говорим что функция сеттаск изменяет стейт при помощи фильтред таск\n//учимся фильтровать таски в кнопках \n//нам нужен фильтр и сетфильтр с юзстейтом, которые будет читать кнопки фильтрации\n//потом пишем условия иф ( фильтре будет актив ) верни нам в таскс фо фильтр только отфильтрованные \n// передаем таскс фор фильтр в пропсы таскс\n//теперь нам надо чтобы считывались кнопки - пишим функцию чейнджфильтр, которая будет вызывать сетфильтр и типы для параметров этой функции \n//третье занятие -\n//используй кей для родительского элмемента в мап с параметром айди\n//добавляем таску в массив - пишем функцию, которая будет клепать похожие данные - элементы массива \n// потом будет вызывать сеттаскс и новую таску setTasks([newTask,...tasks])\n//теперь вызываем в онклике на нужной кнопке \n//считываем с инпута валью при помощи ончейнж \n//пишем локальный юзстейт для валью \n//   let [value,setValue]=useState('')\n//сам валью равен валью\n// ОН ЧЕЙНДЖ (e)=>setValue(e.currentTarget.value)  - говорим эвент карент таргет и валью, эта штука будет считывать каждый символ, \n//задаем пустую строку в инпуте \n// <button onClick={()=>{addTask(value);setValue('');}}>+</button>\n//пишем после эд таск сетвалью, которое меняет валью и задаем в параметрах пустую строку\n//onKeyPress={(e)=>{e.charCode===13}}\n//эта штука для того чтобы если нажимаешь на \n\nfunction App() {\n  let [tasks, setTasks] = useState([{\n    task: 'js',\n    id: v1(),\n    description: 'something',\n    checked: true\n  }, {\n    task: 'sccs',\n    id: v1(),\n    description: 'something',\n    checked: true\n  }, {\n    task: 'html',\n    id: v1(),\n    description: 'something',\n    checked: false\n  }]);\n  let [filter, setFilter] = useState('Active');\n\n  function addTask(newtext) {\n    let newTask = {\n      task: newtext,\n      id: v1(),\n      description: '',\n      checked: false\n    };\n    setTasks([newTask, ...tasks]);\n  }\n\n  function changeFilter(value) {\n    setFilter(value);\n  }\n\n  let tasksForFilter = tasks;\n\n  if (filter === 'Completed') {\n    //без ретурна!!! присваеваем фильтр\n    tasksForFilter = tasks.filter(el => el.checked === true);\n  }\n\n  if (filter === 'Active') {\n    tasksForFilter = tasks.filter(el => el.checked === false);\n  }\n\n  function deleteTask(id) {\n    let filtredTasks = tasks.filter(el => {\n      return el.id !== id;\n    });\n    setTasks(filtredTasks);\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(ToDoList, {\n    title: \"watch\",\n    tasks: tasksForFilter,\n    deleteTask: deleteTask,\n    changeFilter: changeFilter,\n    addTask: addTask,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 13\n    }\n  }));\n}\n\nexport default App;","map":{"version":3,"names":["React","useState","v1","ToDoList","App","tasks","setTasks","task","id","description","checked","filter","setFilter","addTask","newtext","newTask","changeFilter","value","tasksForFilter","el","deleteTask","filtredTasks"],"sources":["/Users/kseniatuzova/Downloads/todo-number2/src/App.tsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { v1 } from 'uuid';\r\nimport './App.css';\r\nimport { ToDoList } from './ToDoList';\r\n\r\n//первое занятие- разбираемся как прокидывать пропсы и использовать типы , как создавать компоненты в других файлах\r\n\r\n//занятие второе - учимся дебажить, писать мап, onclick,\r\n//когда хотим что-то поменять в интерфейсе - думаем про то как изменить данные\r\n\r\n//учимся удалять таски - пишем функцию, но чтобы удалить что-то нужны входные данные - айдишка, вызываем эту функцию в онклике , передаем туда айди, присваеваем старому массиву новый отфлитрованный внутри функции по таким параметрам - верни мне все кроме той, что пришла в параметрах\r\n//присваеваем стейту таски сеттаск и юзстейт\r\n//в функции говорим что функция сеттаск изменяет стейт при помощи фильтред таск\r\n\r\n//учимся фильтровать таски в кнопках \r\n//нам нужен фильтр и сетфильтр с юзстейтом, которые будет читать кнопки фильтрации\r\n//потом пишем условия иф ( фильтре будет актив ) верни нам в таскс фо фильтр только отфильтрованные \r\n// передаем таскс фор фильтр в пропсы таскс\r\n//теперь нам надо чтобы считывались кнопки - пишим функцию чейнджфильтр, которая будет вызывать сетфильтр и типы для параметров этой функции \r\n\r\n//третье занятие -\r\n//используй кей для родительского элмемента в мап с параметром айди\r\n\r\n//добавляем таску в массив - пишем функцию, которая будет клепать похожие данные - элементы массива \r\n// потом будет вызывать сеттаскс и новую таску setTasks([newTask,...tasks])\r\n//теперь вызываем в онклике на нужной кнопке \r\n\r\n//считываем с инпута валью при помощи ончейнж \r\n//пишем локальный юзстейт для валью \r\n//   let [value,setValue]=useState('')\r\n//сам валью равен валью\r\n// ОН ЧЕЙНДЖ (e)=>setValue(e.currentTarget.value)  - говорим эвент карент таргет и валью, эта штука будет считывать каждый символ, \r\n\r\n//задаем пустую строку в инпуте \r\n// <button onClick={()=>{addTask(value);setValue('');}}>+</button>\r\n//пишем после эд таск сетвалью, которое меняет валью и задаем в параметрах пустую строку\r\n\r\n//onKeyPress={(e)=>{e.charCode===13}}\r\n//эта штука для того чтобы если нажимаешь на \r\n\r\n\r\nexport type FilterType='All'|'Active'|'Completed'\r\n\r\nfunction App() {\r\n\r\n\r\nlet [tasks,setTasks] =useState([\r\n    {\r\n        task: 'js',\r\n        id: v1(),\r\n        description:'something',\r\n        checked:true,\r\n    },\r\n    { task: 'sccs' ,\r\n    id: v1(),\r\n    description:'something',\r\n    checked:true,\r\n},\r\n    { task: 'html',\r\n    id: v1(),\r\n    description:'something',\r\n    checked: false, },\r\n]) \r\n\r\nlet [filter, setFilter]=useState<FilterType>('Active')\r\n\r\nfunction addTask(newtext:string){\r\nlet newTask={\r\n    task: newtext,\r\n    id: v1(),\r\n    description:'',\r\n    checked:false,\r\n}\r\nsetTasks([newTask,...tasks])\r\n}\r\n\r\nfunction changeFilter(value:FilterType){\r\n    setFilter(value)\r\n}\r\n\r\nlet tasksForFilter=tasks\r\n\r\n\r\n\r\nif(filter==='Completed'){\r\n    //без ретурна!!! присваеваем фильтр\r\n     tasksForFilter=tasks.filter(\r\n        el=>el.checked===true\r\n    )\r\n}\r\n\r\n\r\nif(filter==='Active'){\r\n    tasksForFilter=tasks.filter(\r\n        el=>el.checked===false\r\n    )\r\n}\r\n\r\n\r\n\r\nfunction deleteTask(id:string){\r\n\r\nlet filtredTasks=tasks.filter((el)=>{return el.id!==id})\r\nsetTasks(filtredTasks)\r\n\r\n}\r\n    return (\r\n        <div className=\"App\">\r\n            <ToDoList title='watch' tasks={tasksForFilter} deleteTask={deleteTask}changeFilter={changeFilter}\r\n            addTask={addTask}/>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default App;\r\n"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,EAAT,QAAmB,MAAnB;AACA,OAAO,WAAP;AACA,SAASC,QAAT,QAAyB,YAAzB,C,CAEA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;;AAKA,SAASC,GAAT,GAAe;EAGf,IAAI,CAACC,KAAD,EAAOC,QAAP,IAAkBL,QAAQ,CAAC,CAC3B;IACIM,IAAI,EAAE,IADV;IAEIC,EAAE,EAAEN,EAAE,EAFV;IAGIO,WAAW,EAAC,WAHhB;IAIIC,OAAO,EAAC;EAJZ,CAD2B,EAO3B;IAAEH,IAAI,EAAE,MAAR;IACAC,EAAE,EAAEN,EAAE,EADN;IAEAO,WAAW,EAAC,WAFZ;IAGAC,OAAO,EAAC;EAHR,CAP2B,EAY3B;IAAEH,IAAI,EAAE,MAAR;IACAC,EAAE,EAAEN,EAAE,EADN;IAEAO,WAAW,EAAC,WAFZ;IAGAC,OAAO,EAAE;EAHT,CAZ2B,CAAD,CAA9B;EAkBA,IAAI,CAACC,MAAD,EAASC,SAAT,IAAoBX,QAAQ,CAAa,QAAb,CAAhC;;EAEA,SAASY,OAAT,CAAiBC,OAAjB,EAAgC;IAChC,IAAIC,OAAO,GAAC;MACRR,IAAI,EAAEO,OADE;MAERN,EAAE,EAAEN,EAAE,EAFE;MAGRO,WAAW,EAAC,EAHJ;MAIRC,OAAO,EAAC;IAJA,CAAZ;IAMAJ,QAAQ,CAAC,CAACS,OAAD,EAAS,GAAGV,KAAZ,CAAD,CAAR;EACC;;EAED,SAASW,YAAT,CAAsBC,KAAtB,EAAuC;IACnCL,SAAS,CAACK,KAAD,CAAT;EACH;;EAED,IAAIC,cAAc,GAACb,KAAnB;;EAIA,IAAGM,MAAM,KAAG,WAAZ,EAAwB;IACpB;IACCO,cAAc,GAACb,KAAK,CAACM,MAAN,CACZQ,EAAE,IAAEA,EAAE,CAACT,OAAH,KAAa,IADL,CAAf;EAGJ;;EAGD,IAAGC,MAAM,KAAG,QAAZ,EAAqB;IACjBO,cAAc,GAACb,KAAK,CAACM,MAAN,CACXQ,EAAE,IAAEA,EAAE,CAACT,OAAH,KAAa,KADN,CAAf;EAGH;;EAID,SAASU,UAAT,CAAoBZ,EAApB,EAA8B;IAE9B,IAAIa,YAAY,GAAChB,KAAK,CAACM,MAAN,CAAcQ,EAAD,IAAM;MAAC,OAAOA,EAAE,CAACX,EAAH,KAAQA,EAAf;IAAkB,CAAtC,CAAjB;IACAF,QAAQ,CAACe,YAAD,CAAR;EAEC;;EACG,oBACI;IAAK,SAAS,EAAC,KAAf;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,gBACI,oBAAC,QAAD;IAAU,KAAK,EAAC,OAAhB;IAAwB,KAAK,EAAEH,cAA/B;IAA+C,UAAU,EAAEE,UAA3D;IAAsE,YAAY,EAAEJ,YAApF;IACA,OAAO,EAAEH,OADT;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EADJ,CADJ;AAMH;;AAGD,eAAeT,GAAf"},"metadata":{},"sourceType":"module"}