{"ast":null,"code":"var _jsxFileName = \"/Users/kseniatuzova/Documents/GitHub/todo-for-courses/src/App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { v1 } from 'uu   id';\nimport { AddItemForm } from './AddItemForm';\nimport './App.css';\nimport { ToDoList } from './ToDoList';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  let toDoListId1 = v1();\n  let toDoListId2 = v1();\n  let toDoListId3 = v1();\n\n  //говорим сет туду чтобы фильтр залезал и менял значение  фильтров внутри обхектов\n  let [toDoLists, setToDoList] = useState([{\n    title: 'what to learn',\n    id: toDoListId1,\n    filter: 'All'\n  }, {\n    title: 'what to buy',\n    id: toDoListId2,\n    filter: 'All'\n  }, {\n    title: 'what i want',\n    id: toDoListId3,\n    filter: 'All'\n  }]);\n  let [tasksObj, setTasks] = useState({\n    [toDoListId1]: [{\n      task: 'js',\n      id: v1(),\n      description: 'something',\n      checked: true\n    }, {\n      task: 'sccs',\n      id: v1(),\n      description: 'something',\n      checked: true\n    }, {\n      task: 'html',\n      id: v1(),\n      description: 'something',\n      checked: false\n    }],\n    //когда оборачиваем значение в квадратные скобки - значение само по себе становится ключом, а не тудулист2 становится ключом\n    [toDoListId2]: [{\n      task: 'books',\n      id: v1(),\n      description: 'something',\n      checked: true\n    }, {\n      task: 'magazines',\n      id: v1(),\n      description: 'something',\n      checked: true\n    }],\n    [toDoListId3]: [{\n      task: 'food',\n      id: v1(),\n      description: 'something',\n      checked: true\n    }, {\n      task: 'bakery',\n      id: v1(),\n      description: 'something',\n      checked: true\n    }]\n  });\n  function deleteToDoList(id) {\n    //внимание - здесь легко запупаться, в массиве, который хранит таски и в массиве туду листов, используем тудулисты, так как в первую очередь мы удаляем именно его\n\n    let filtredToDoLists = toDoLists.filter(el => {\n      return el.id !== id;\n    });\n    setToDoList(filtredToDoLists);\n\n    //нам нет смысла хранить таски для удаленного туду листа\n    delete tasksObj[id];\n    //обязательно вызываем сет, чтобы все поменялось\n    setTasks({\n      ...tasksObj\n    });\n  }\n  function addToDoList(title) {\n    let newlist = {\n      title: title,\n      id: v1(),\n      filter: 'All'\n    };\n    setTasks({\n      ...tasksObj,\n      [newlist.id]: []\n    });\n  }\n  function changeCheckBox(toDoListId, id, checked) {\n    setTasks({\n      ...tasksObj,\n      [toDoListId]: tasksObj[toDoListId].map(task => {\n        return task.id === id ? {\n          ...task,\n          checked: checked\n        } : task;\n      })\n    });\n    //let tasks = tasksObj[toDoListId]\n    //let task = tasks.find(t => t.id === id)\n    //if (task) {\n    //    task.checked = checked;\n    //}\n    //создаем видимость того, что здесь лежит что-то новое\n    // let copy=[...tasks]\n    // setTasks(copy)\n\n    //сокращенный вариант\n    // setTasks({...tasksObj, [toDoListId]: tasks})\n  }\n\n  //удаляем общий фильр после того как мы разделили фильтры для разныз туду листов. но сетфильтр испольльзовался в чейндж фильтре. Поэтому мы будем там теперь получать айдишку тудулиста и менять фильтр в самом объекте туду листа\n  // let [filter, setFilter] = useState<FilterType>('Active')\n\n  function addTask(newText) {\n    // let tasks = tasksObj[toDoListId]\n\n    let newTask = {\n      task: newText,\n      //.trim(),\n      id: v1(),\n      description: '',\n      checked: false\n    };\n    setTasks({\n      ...tasksObj,\n      [v1()]: [newTask, ...tasksObj[v1()]]\n    });\n  }\n\n  //здесть получаем айдишник туду листа чтобы переписать потом фильтр\n  function changeFilter(toDoListId, value) {\n    //ищем адишку которую надо удалить\n    let toDoList = toDoLists.find(el => el.id === toDoListId);\n    if (toDoList) {\n      //присваеваем текущему фильтру обновленное значение\n      toDoList.filter = value;\n      //обманываем что здесь новый массив за счет спред оператора\n      setToDoList([...toDoLists]);\n    }\n  }\n  function deleteTask(toDoListId, id) {\n    // let tasks = tasksObj[toDoListId]\n    // let filtredTasks = tasks.filter((el) => { return el.id !== id })\n    // tasksObj[toDoListId] = filtredTasks\n    // setTasks({ ...tasksObj })\n\n    setTasks({\n      ...tasksObj,\n      [toDoListId]: tasksObj[toDoListId].filter(el => el.id !== id)\n    });\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(AddItemForm, {\n      deleteToDoList: deleteToDoList,\n      id: \"\",\n      addItem: addTask,\n      addToDoList: addToDoList\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 13\n    }, this), toDoLists.map(el => {\n      let tasksForToDoList = tasksObj[el.id];\n      if (el.filter === 'Completed') {\n        //без ретурна!!! присваеваем фильтр\n        tasksForToDoList = tasksForToDoList.filter(el => el.checked === true);\n      }\n      if (el.filter === 'Active') {\n        tasksForToDoList = tasksForToDoList.filter(el => el.checked === false);\n      }\n      return /*#__PURE__*/_jsxDEV(ToDoList\n      //не забудь добавить кей в мап\n      , {\n        //добавляем айди туду листа чтобы фильтр знал в каком именно туду листе будет новый фильтр. Затем мы передаем этот айдишник в хэндлеры кнопок фильтров\n        id: el.id,\n        title: el.title,\n        tasks: tasksForToDoList,\n        deleteTask: deleteTask,\n        changeFilter: changeFilter,\n        addTask: addTask,\n        changeCheckBox: changeCheckBox,\n        filter: el.filter,\n        deleteToDoList: deleteToDoList\n      }, el.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 28\n      }, this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 210,\n    columnNumber: 9\n  }, this);\n}\n_s(App, \"Ij7QvHSXJnmRT/cC1VRLVyrnLW8=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","v1","AddItemForm","ToDoList","App","toDoListId1","toDoListId2","toDoListId3","toDoLists","setToDoList","title","id","filter","tasksObj","setTasks","task","description","checked","deleteToDoList","filtredToDoLists","el","addToDoList","newlist","changeCheckBox","toDoListId","map","addTask","newText","newTask","changeFilter","value","toDoList","find","deleteTask","tasksForToDoList"],"sources":["/Users/kseniatuzova/Documents/GitHub/todo-for-courses/src/App.tsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { v1 } from 'uu   id';\r\nimport { AddItemForm } from './AddItemForm';\r\nimport './App.css';\r\nimport { ToDoList } from './ToDoList';\r\n\r\n\r\n\r\nexport type FilterType = 'All' | 'Active' | 'Completed'\r\n\r\n\r\nexport type ToDoListsType = {\r\n    title: string,\r\n    id: string,\r\n    filter: FilterType\r\n}\r\n\r\n\r\nfunction App() {\r\n\r\n\r\n    let toDoListId1 = v1()\r\n    let toDoListId2 = v1()\r\n    let toDoListId3 = v1()\r\n\r\n\r\n\r\n    //говорим сет туду чтобы фильтр залезал и менял значение  фильтров внутри обхектов\r\n    let [toDoLists, setToDoList] = useState<Array<ToDoListsType>>([\r\n        {\r\n            title: 'what to learn',\r\n            id: toDoListId1,\r\n            filter: 'All'\r\n        },\r\n        {\r\n            title: 'what to buy',\r\n            id: toDoListId2,\r\n            filter: 'All'\r\n        },\r\n        {\r\n            title: 'what i want',\r\n            id: toDoListId3,\r\n            filter: 'All'\r\n        },\r\n    ])\r\n\r\n\r\n\r\n\r\n    let [tasksObj, setTasks] = useState({\r\n        [toDoListId1]: [\r\n            {\r\n                task: 'js',\r\n                id: v1(),\r\n                description: 'something',\r\n                checked: true,\r\n            },\r\n            {\r\n                task: 'sccs',\r\n                id: v1(),\r\n                description: 'something',\r\n                checked: true,\r\n            },\r\n            {\r\n                task: 'html',\r\n                id: v1(),\r\n                description: 'something',\r\n                checked: false,\r\n            },\r\n        ],\r\n        //когда оборачиваем значение в квадратные скобки - значение само по себе становится ключом, а не тудулист2 становится ключом\r\n        [toDoListId2]: [\r\n            {\r\n                task: 'books',\r\n                id: v1(),\r\n                description: 'something',\r\n                checked: true,\r\n            },\r\n            {\r\n                task: 'magazines',\r\n                id: v1(),\r\n                description: 'something',\r\n                checked: true,\r\n            },\r\n        ],\r\n        [toDoListId3]: [\r\n            {\r\n                task: 'food',\r\n                id: v1(),\r\n                description: 'something',\r\n                checked: true,\r\n            },\r\n            {\r\n                task: 'bakery',\r\n                id: v1(),\r\n                description: 'something',\r\n                checked: true,\r\n            },\r\n\r\n\r\n        ],\r\n\r\n\r\n    }\r\n    )\r\n\r\n    function deleteToDoList(id: string) {\r\n\r\n        //внимание - здесь легко запупаться, в массиве, который хранит таски и в массиве туду листов, используем тудулисты, так как в первую очередь мы удаляем именно его\r\n        \r\n        let filtredToDoLists = toDoLists.filter((el) => { return el.id !== id })\r\n        \r\n        setToDoList(filtredToDoLists)\r\n\r\n        //нам нет смысла хранить таски для удаленного туду листа\r\n        delete tasksObj[id]\r\n        //обязательно вызываем сет, чтобы все поменялось\r\n        setTasks({...tasksObj})\r\n\r\n    }\r\n\r\n  \r\n    function addToDoList(title: string) {\r\n\r\n       let newlist={\r\n        title: title,\r\n        id:v1(),\r\n        filter: 'All'\r\n    }\r\n\r\n\r\n    setTasks({ ...tasksObj, [newlist.id]: [] })\r\n\r\n       }\r\n\r\n\r\n    function changeCheckBox(toDoListId: string, id: string, checked: boolean) {\r\n\r\n\r\n        setTasks({\r\n            ...tasksObj, [toDoListId]: tasksObj[toDoListId]\r\n                .map(task => {\r\n                    return task.id === id ? { ...task, checked: checked } : task\r\n                })\r\n        })\r\n        //let tasks = tasksObj[toDoListId]\r\n        //let task = tasks.find(t => t.id === id)\r\n        //if (task) {\r\n        //    task.checked = checked;\r\n        //}\r\n        //создаем видимость того, что здесь лежит что-то новое\r\n        // let copy=[...tasks]\r\n        // setTasks(copy)\r\n\r\n        //сокращенный вариант\r\n        // setTasks({...tasksObj, [toDoListId]: tasks})\r\n\r\n\r\n    }\r\n\r\n    //удаляем общий фильр после того как мы разделили фильтры для разныз туду листов. но сетфильтр испольльзовался в чейндж фильтре. Поэтому мы будем там теперь получать айдишку тудулиста и менять фильтр в самом объекте туду листа\r\n    // let [filter, setFilter] = useState<FilterType>('Active')\r\n\r\n\r\n\r\n    function addTask( newText: string) {\r\n        // let tasks = tasksObj[toDoListId]\r\n\r\n        let newTask = {\r\n            task: newText,//.trim(),\r\n            id: v1(),\r\n            description: '',\r\n            checked: false,\r\n        }\r\n\r\n\r\n        setTasks({ ...tasksObj, [v1()]: [newTask, ...tasksObj[v1()]] })\r\n\r\n\r\n    }\r\n\r\n\r\n    //здесть получаем айдишник туду листа чтобы переписать потом фильтр\r\n    function changeFilter(toDoListId: string, value: FilterType) {\r\n        //ищем адишку которую надо удалить\r\n        let toDoList = toDoLists.find((el) => el.id === toDoListId)\r\n        if (toDoList) {\r\n            //присваеваем текущему фильтру обновленное значение\r\n            toDoList.filter = value;\r\n            //обманываем что здесь новый массив за счет спред оператора\r\n            setToDoList([...toDoLists])\r\n        }\r\n    }\r\n\r\n\r\n\r\n    function deleteTask(toDoListId: string, id: string) {\r\n        // let tasks = tasksObj[toDoListId]\r\n        // let filtredTasks = tasks.filter((el) => { return el.id !== id })\r\n        // tasksObj[toDoListId] = filtredTasks\r\n        // setTasks({ ...tasksObj })\r\n\r\nsetTasks({...tasksObj,[toDoListId]:tasksObj[toDoListId].filter(el=>el.id !== id)})\r\n\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AddItemForm deleteToDoList={deleteToDoList} id='' addItem={addTask} addToDoList={addToDoList}/>\r\n\r\n            {\r\n                toDoLists.map((el: any) => {\r\n\r\n                    let tasksForToDoList = tasksObj[el.id]\r\n\r\n\r\n\r\n\r\n                    if (el.filter === 'Completed') {\r\n                        //без ретурна!!! присваеваем фильтр\r\n                        tasksForToDoList = tasksForToDoList.filter(\r\n                            el => el.checked === true\r\n                        )\r\n                    }\r\n\r\n\r\n                    if (el.filter === 'Active') {\r\n                        tasksForToDoList = tasksForToDoList.filter(\r\n                            el => el.checked === false\r\n                        )\r\n                    }\r\n\r\n\r\n                    return <ToDoList\r\n                        //не забудь добавить кей в мап\r\n                        key={el.id}\r\n                        //добавляем айди туду листа чтобы фильтр знал в каком именно туду листе будет новый фильтр. Затем мы передаем этот айдишник в хэндлеры кнопок фильтров\r\n                        id={el.id}\r\n                        title={el.title}\r\n                        tasks={tasksForToDoList}\r\n                        deleteTask={deleteTask}\r\n                        changeFilter={changeFilter}\r\n                        addTask={addTask}\r\n                        changeCheckBox={changeCheckBox}\r\n                        filter={el.filter}\r\n                        deleteToDoList={deleteToDoList} />\r\n                })\r\n            }\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default App;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}