{"ast":null,"code":"var _jsxFileName = \"/Users/kseniatuzova/Documents/GitHub/todo-for-courses/todo-number2/src/App.tsx\";\nimport React, { useState } from 'react';\nimport { v1 } from 'uuid';\nimport './App.css';\nimport { ToDoList } from './ToDoList';\n\nfunction App() {\n  let toDoListId1 = v1();\n  let toDoListId2 = v1();\n  let [toDoLists, setToDoList] = useState([{\n    title: 'what to learn',\n    id: toDoListId1,\n    filter: 'Completed'\n  }, {\n    title: 'what to buy',\n    id: toDoListId2,\n    filter: 'Active'\n  }, {\n    title: 'what i want',\n    id: v1(),\n    filter: 'Completed'\n  }]);\n  let [tasksObj, setTasks] = useState({\n    [toDoListId1]: [{\n      task: 'js',\n      id: v1(),\n      description: 'something',\n      checked: true\n    }, {\n      task: 'sccs',\n      id: v1(),\n      description: 'something',\n      checked: true\n    }, {\n      task: 'html',\n      id: v1(),\n      description: 'something',\n      checked: false\n    }],\n    //когда оборачиваем значение в квадратные скобки - значение само по себе становится ключом, а не тудулист2 становится ключом\n    [toDoListId2]: [{\n      task: 'books',\n      id: v1(),\n      description: 'something',\n      checked: true\n    }, {\n      task: 'magazines',\n      id: v1(),\n      description: 'something',\n      checked: true\n    }]\n  });\n\n  function changeCheckBox(toDoListId, id, checked) {\n    setTasks({ ...tasksObj,\n      [toDoListId]: tasksObj[toDoListId].map(task => {\n        return task.id === id ? { ...task,\n          checked: checked\n        } : task;\n      })\n    }); //let tasks = tasksObj[toDoListId]\n    //let task = tasks.find(t => t.id === id)\n    //if (task) {\n    //    task.checked = checked;\n    //}\n    //создаем видимость того, что здесь лежит что-то новое\n    // let copy=[...tasks]\n    // setTasks(copy)\n    //сокращенный вариант\n    // setTasks({...tasksObj, [toDoListId]: tasks})\n  }\n\n  let [filter, setFilter] = useState('Active');\n\n  function addTask(toDoListId, newText) {\n    let tasks = tasksObj[toDoListId];\n\n    if (newText.trim() !== '') {\n      let newTask = {\n        task: newText.trim(),\n        id: v1(),\n        description: '',\n        checked: false\n      };\n      setTasks({ ...newTask,\n        ...tasks\n      });\n    }\n  }\n\n  function changeFilter(toDoListId, value) {\n    let toDoList = toDoLists.find(el => el.id === toDoListId);\n\n    if (toDoList) {\n      toDoList.filter = value;\n      setToDoList([...toDoLists]);\n    }\n\n    setFilter(value);\n  }\n\n  let tasksForFilter = tasks;\n\n  function deleteTask(id, toDoListId) {\n    let tasks = tasksObj[toDoListId];\n    let filtredTasks = tasks.filter(el => {\n      return el.id !== id;\n    });\n    tasksObj[toDoListId] = filtredTasks;\n    setTasks({ ...tasksObj\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 9\n    }\n  }, toDoLists.map(el => {\n    let tasksForToDoList = tasks[el.id];\n\n    if (filter === 'Completed') {\n      //без ретурна!!! присваеваем фильтр\n      tasksForFilter = tasksForToDoList.filter(el => el.checked === true);\n    }\n\n    if (filter === 'Active') {\n      tasksForFilter = tasksForToDoList.filter(el => el.checked === false);\n    }\n\n    return /*#__PURE__*/React.createElement(ToDoList //не забудь добавить кей в мап\n    , {\n      key: el.id,\n      id: el.id,\n      title: el.title,\n      tasks: tasksForFilter,\n      deleteTask: deleteTask,\n      changeFilter: changeFilter,\n      addTask: addTask,\n      changeCheckBox: changeCheckBox,\n      filter: el.filter,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 28\n      }\n    });\n  }));\n}\n\nexport default App;","map":{"version":3,"names":["React","useState","v1","ToDoList","App","toDoListId1","toDoListId2","toDoLists","setToDoList","title","id","filter","tasksObj","setTasks","task","description","checked","changeCheckBox","toDoListId","map","setFilter","addTask","newText","tasks","trim","newTask","changeFilter","value","toDoList","find","el","tasksForFilter","deleteTask","filtredTasks","tasksForToDoList"],"sources":["/Users/kseniatuzova/Documents/GitHub/todo-for-courses/todo-number2/src/App.tsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { v1 } from 'uuid';\r\nimport './App.css';\r\nimport { ToDoList } from './ToDoList';\r\n\r\n\r\n\r\nexport type FilterType = 'All' | 'Active' | 'Completed'\r\n\r\n\r\nexport type ToDoListsType = {\r\n    title: string,\r\n    id: string,\r\n    filter: FilterType\r\n}\r\n\r\n\r\nfunction App() {\r\n\r\n\r\n    let toDoListId1 = v1()\r\n    let toDoListId2 = v1()\r\n\r\n\r\n\r\n    let [toDoLists, setToDoList] = useState<Array<ToDoListsType>>([\r\n        {\r\n            title: 'what to learn',\r\n            id: toDoListId1,\r\n            filter: 'Completed'\r\n        },\r\n        {\r\n            title: 'what to buy',\r\n            id: toDoListId2,\r\n            filter: 'Active'\r\n        },\r\n        {\r\n            title: 'what i want',\r\n            id: v1(),\r\n            filter: 'Completed'\r\n        },\r\n    ])\r\n\r\n\r\n\r\n\r\n    let [tasksObj, setTasks] = useState({\r\n        [toDoListId1]: [\r\n            {\r\n                task: 'js',\r\n                id: v1(),\r\n                description: 'something',\r\n                checked: true,\r\n            },\r\n            {\r\n                task: 'sccs',\r\n                id: v1(),\r\n                description: 'something',\r\n                checked: true,\r\n            },\r\n            {\r\n                task: 'html',\r\n                id: v1(),\r\n                description: 'something',\r\n                checked: false,\r\n            },\r\n        ],\r\n        //когда оборачиваем значение в квадратные скобки - значение само по себе становится ключом, а не тудулист2 становится ключом\r\n        [toDoListId2]: [\r\n            {\r\n                task: 'books',\r\n                id: v1(),\r\n                description: 'something',\r\n                checked: true,\r\n            },\r\n            {\r\n                task: 'magazines',\r\n                id: v1(),\r\n                description: 'something',\r\n                checked: true,\r\n            },\r\n\r\n        ],\r\n    }\r\n    )\r\n\r\n    function changeCheckBox(toDoListId: string, id: string, checked: boolean) {\r\n\r\n\r\n        setTasks({...tasksObj, [toDoListId]: tasksObj[toDoListId]\r\n            .map(task => {\r\n                return task.id === id ? {...task, checked: checked} : task\r\n            })})\r\n        //let tasks = tasksObj[toDoListId]\r\n        //let task = tasks.find(t => t.id === id)\r\n        //if (task) {\r\n        //    task.checked = checked;\r\n        //}\r\n        //создаем видимость того, что здесь лежит что-то новое\r\n        // let copy=[...tasks]\r\n        // setTasks(copy)\r\n\r\n        //сокращенный вариант\r\n        // setTasks({...tasksObj, [toDoListId]: tasks})\r\n  \r\n\r\n    }\r\n\r\n    let [filter, setFilter] = useState<FilterType>('Active')\r\n\r\n\r\n\r\n    function addTask(toDoListId: string, newText: string) {\r\n        let tasks = tasksObj[toDoListId]\r\n\r\n\r\n        if (newText.trim() !== '') {\r\n            let newTask = {\r\n                task: newText.trim(),\r\n                id: v1(),\r\n                description: '',\r\n                checked: false,\r\n            }\r\n\r\n\r\n            setTasks({...newTask, ...tasks})\r\n        }\r\n\r\n    }\r\n\r\n    function changeFilter( toDoListId: string, value: FilterType) {\r\n        let toDoList = toDoLists.find((el) => el.id === toDoListId)\r\n        if (toDoList) {\r\n            toDoList.filter = value;\r\n            setToDoList([...toDoLists])\r\n        }\r\n        setFilter(value)\r\n    }\r\n\r\n    let tasksForFilter = tasks\r\n\r\n\r\n\r\n\r\n\r\n    function deleteTask(id: string, toDoListId: string) {\r\n        let tasks = tasksObj[toDoListId]\r\n        let filtredTasks = tasks.filter((el) => { return el.id !== id })\r\n        tasksObj[toDoListId] = filtredTasks\r\n        setTasks({ ...tasksObj })\r\n\r\n\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"App\">\r\n\r\n            {\r\n                toDoLists.map((el: any) => {\r\n\r\n                    let tasksForToDoList = tasks[el.id]\r\n\r\n\r\n                    if (filter === 'Completed') {\r\n                        //без ретурна!!! присваеваем фильтр\r\n                        tasksForFilter = tasksForToDoList.filter(\r\n                            el => el.checked === true\r\n                        )\r\n                    }\r\n\r\n\r\n                    if (filter === 'Active') {\r\n                        tasksForFilter = tasksForToDoList.filter(\r\n                            el => el.checked === false\r\n                        )\r\n                    }\r\n\r\n\r\n                    return <ToDoList\r\n                        //не забудь добавить кей в мап\r\n                        key={el.id}\r\n                        id={el.id}\r\n                        title={el.title}\r\n                        tasks={tasksForFilter}\r\n                        deleteTask={deleteTask}\r\n                        changeFilter={changeFilter}\r\n                        addTask={addTask}\r\n                        changeCheckBox={changeCheckBox}\r\n                        filter={el.filter} />\r\n                })\r\n            }\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default App;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}